
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Character
 * 
 */
export type Character = $Result.DefaultSelection<Prisma.$CharacterPayload>
/**
 * Model Character_Gear
 * 
 */
export type Character_Gear = $Result.DefaultSelection<Prisma.$Character_GearPayload>
/**
 * Model Gear
 * 
 */
export type Gear = $Result.DefaultSelection<Prisma.$GearPayload>
/**
 * Model Character_Class
 * 
 */
export type Character_Class = $Result.DefaultSelection<Prisma.$Character_ClassPayload>
/**
 * Model Monster
 * 
 */
export type Monster = $Result.DefaultSelection<Prisma.$MonsterPayload>
/**
 * Model Spells
 * 
 */
export type Spells = $Result.DefaultSelection<Prisma.$SpellsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.character`: Exposes CRUD operations for the **Character** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Characters
    * const characters = await prisma.character.findMany()
    * ```
    */
  get character(): Prisma.CharacterDelegate<ExtArgs>;

  /**
   * `prisma.character_Gear`: Exposes CRUD operations for the **Character_Gear** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Character_Gears
    * const character_Gears = await prisma.character_Gear.findMany()
    * ```
    */
  get character_Gear(): Prisma.Character_GearDelegate<ExtArgs>;

  /**
   * `prisma.gear`: Exposes CRUD operations for the **Gear** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Gears
    * const gears = await prisma.gear.findMany()
    * ```
    */
  get gear(): Prisma.GearDelegate<ExtArgs>;

  /**
   * `prisma.character_Class`: Exposes CRUD operations for the **Character_Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Character_Classes
    * const character_Classes = await prisma.character_Class.findMany()
    * ```
    */
  get character_Class(): Prisma.Character_ClassDelegate<ExtArgs>;

  /**
   * `prisma.monster`: Exposes CRUD operations for the **Monster** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Monsters
    * const monsters = await prisma.monster.findMany()
    * ```
    */
  get monster(): Prisma.MonsterDelegate<ExtArgs>;

  /**
   * `prisma.spells`: Exposes CRUD operations for the **Spells** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Spells
    * const spells = await prisma.spells.findMany()
    * ```
    */
  get spells(): Prisma.SpellsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.8.0
   * Query Engine version: 0a83d8541752d7582de2ebc1ece46519ce72a848
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Character: 'Character',
    Character_Gear: 'Character_Gear',
    Gear: 'Gear',
    Character_Class: 'Character_Class',
    Monster: 'Monster',
    Spells: 'Spells'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'character' | 'character_Gear' | 'gear' | 'character_Class' | 'monster' | 'spells'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Character: {
        payload: Prisma.$CharacterPayload<ExtArgs>
        fields: Prisma.CharacterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CharacterFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CharacterFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          findFirst: {
            args: Prisma.CharacterFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CharacterFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          findMany: {
            args: Prisma.CharacterFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>[]
          }
          create: {
            args: Prisma.CharacterCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          createMany: {
            args: Prisma.CharacterCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CharacterDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          update: {
            args: Prisma.CharacterUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          deleteMany: {
            args: Prisma.CharacterDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CharacterUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CharacterUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CharacterPayload>
          }
          aggregate: {
            args: Prisma.CharacterAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCharacter>
          }
          groupBy: {
            args: Prisma.CharacterGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CharacterGroupByOutputType>[]
          }
          count: {
            args: Prisma.CharacterCountArgs<ExtArgs>,
            result: $Utils.Optional<CharacterCountAggregateOutputType> | number
          }
        }
      }
      Character_Gear: {
        payload: Prisma.$Character_GearPayload<ExtArgs>
        fields: Prisma.Character_GearFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Character_GearFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_GearPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Character_GearFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_GearPayload>
          }
          findFirst: {
            args: Prisma.Character_GearFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_GearPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Character_GearFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_GearPayload>
          }
          findMany: {
            args: Prisma.Character_GearFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_GearPayload>[]
          }
          create: {
            args: Prisma.Character_GearCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_GearPayload>
          }
          createMany: {
            args: Prisma.Character_GearCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Character_GearDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_GearPayload>
          }
          update: {
            args: Prisma.Character_GearUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_GearPayload>
          }
          deleteMany: {
            args: Prisma.Character_GearDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Character_GearUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Character_GearUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_GearPayload>
          }
          aggregate: {
            args: Prisma.Character_GearAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCharacter_Gear>
          }
          groupBy: {
            args: Prisma.Character_GearGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Character_GearGroupByOutputType>[]
          }
          count: {
            args: Prisma.Character_GearCountArgs<ExtArgs>,
            result: $Utils.Optional<Character_GearCountAggregateOutputType> | number
          }
        }
      }
      Gear: {
        payload: Prisma.$GearPayload<ExtArgs>
        fields: Prisma.GearFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GearFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GearPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GearFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GearPayload>
          }
          findFirst: {
            args: Prisma.GearFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GearPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GearFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GearPayload>
          }
          findMany: {
            args: Prisma.GearFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GearPayload>[]
          }
          create: {
            args: Prisma.GearCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GearPayload>
          }
          createMany: {
            args: Prisma.GearCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GearDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GearPayload>
          }
          update: {
            args: Prisma.GearUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GearPayload>
          }
          deleteMany: {
            args: Prisma.GearDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GearUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GearUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GearPayload>
          }
          aggregate: {
            args: Prisma.GearAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGear>
          }
          groupBy: {
            args: Prisma.GearGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GearGroupByOutputType>[]
          }
          count: {
            args: Prisma.GearCountArgs<ExtArgs>,
            result: $Utils.Optional<GearCountAggregateOutputType> | number
          }
        }
      }
      Character_Class: {
        payload: Prisma.$Character_ClassPayload<ExtArgs>
        fields: Prisma.Character_ClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Character_ClassFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_ClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Character_ClassFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_ClassPayload>
          }
          findFirst: {
            args: Prisma.Character_ClassFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_ClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Character_ClassFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_ClassPayload>
          }
          findMany: {
            args: Prisma.Character_ClassFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_ClassPayload>[]
          }
          create: {
            args: Prisma.Character_ClassCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_ClassPayload>
          }
          createMany: {
            args: Prisma.Character_ClassCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Character_ClassDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_ClassPayload>
          }
          update: {
            args: Prisma.Character_ClassUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_ClassPayload>
          }
          deleteMany: {
            args: Prisma.Character_ClassDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Character_ClassUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Character_ClassUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Character_ClassPayload>
          }
          aggregate: {
            args: Prisma.Character_ClassAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCharacter_Class>
          }
          groupBy: {
            args: Prisma.Character_ClassGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Character_ClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.Character_ClassCountArgs<ExtArgs>,
            result: $Utils.Optional<Character_ClassCountAggregateOutputType> | number
          }
        }
      }
      Monster: {
        payload: Prisma.$MonsterPayload<ExtArgs>
        fields: Prisma.MonsterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MonsterFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MonsterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MonsterFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MonsterPayload>
          }
          findFirst: {
            args: Prisma.MonsterFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MonsterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MonsterFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MonsterPayload>
          }
          findMany: {
            args: Prisma.MonsterFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MonsterPayload>[]
          }
          create: {
            args: Prisma.MonsterCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MonsterPayload>
          }
          createMany: {
            args: Prisma.MonsterCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MonsterDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MonsterPayload>
          }
          update: {
            args: Prisma.MonsterUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MonsterPayload>
          }
          deleteMany: {
            args: Prisma.MonsterDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MonsterUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MonsterUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MonsterPayload>
          }
          aggregate: {
            args: Prisma.MonsterAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMonster>
          }
          groupBy: {
            args: Prisma.MonsterGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MonsterGroupByOutputType>[]
          }
          count: {
            args: Prisma.MonsterCountArgs<ExtArgs>,
            result: $Utils.Optional<MonsterCountAggregateOutputType> | number
          }
        }
      }
      Spells: {
        payload: Prisma.$SpellsPayload<ExtArgs>
        fields: Prisma.SpellsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpellsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpellsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload>
          }
          findFirst: {
            args: Prisma.SpellsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpellsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload>
          }
          findMany: {
            args: Prisma.SpellsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload>[]
          }
          create: {
            args: Prisma.SpellsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload>
          }
          createMany: {
            args: Prisma.SpellsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SpellsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload>
          }
          update: {
            args: Prisma.SpellsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload>
          }
          deleteMany: {
            args: Prisma.SpellsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SpellsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SpellsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpellsPayload>
          }
          aggregate: {
            args: Prisma.SpellsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSpells>
          }
          groupBy: {
            args: Prisma.SpellsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SpellsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpellsCountArgs<ExtArgs>,
            result: $Utils.Optional<SpellsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CharacterCountOutputType
   */

  export type CharacterCountOutputType = {
    inventory: number
  }

  export type CharacterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | CharacterCountOutputTypeCountInventoryArgs
  }

  // Custom InputTypes

  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterCountOutputType
     */
    select?: CharacterCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CharacterCountOutputType without action
   */
  export type CharacterCountOutputTypeCountInventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Character_GearWhereInput
  }



  /**
   * Count Type GearCountOutputType
   */

  export type GearCountOutputType = {
    Character_Gear: number
  }

  export type GearCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Character_Gear?: boolean | GearCountOutputTypeCountCharacter_GearArgs
  }

  // Custom InputTypes

  /**
   * GearCountOutputType without action
   */
  export type GearCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GearCountOutputType
     */
    select?: GearCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * GearCountOutputType without action
   */
  export type GearCountOutputTypeCountCharacter_GearArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Character_GearWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    character_id: number | null
    phone: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    character_id: number | null
    phone: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    isAdmin: boolean | null
    isBanned: boolean | null
    createdAt: Date | null
    character_id: number | null
    phone: number | null
    email: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    isAdmin: boolean | null
    isBanned: boolean | null
    createdAt: Date | null
    character_id: number | null
    phone: number | null
    email: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    isAdmin: number
    isBanned: number
    createdAt: number
    character_id: number
    phone: number
    email: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    character_id?: true
    phone?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    character_id?: true
    phone?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    isAdmin?: true
    isBanned?: true
    createdAt?: true
    character_id?: true
    phone?: true
    email?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    isAdmin?: true
    isBanned?: true
    createdAt?: true
    character_id?: true
    phone?: true
    email?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    isAdmin?: true
    isBanned?: true
    createdAt?: true
    character_id?: true
    phone?: true
    email?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    password: string
    isAdmin: boolean
    isBanned: boolean
    createdAt: Date
    character_id: number | null
    phone: number | null
    email: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    isAdmin?: boolean
    isBanned?: boolean
    createdAt?: boolean
    character_id?: boolean
    phone?: boolean
    email?: boolean
    character?: boolean | User$characterArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    isAdmin?: boolean
    isBanned?: boolean
    createdAt?: boolean
    character_id?: boolean
    phone?: boolean
    email?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    character?: boolean | User$characterArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      character: Prisma.$CharacterPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password: string
      isAdmin: boolean
      isBanned: boolean
      createdAt: Date
      character_id: number | null
      phone: number | null
      email: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    character<T extends User$characterArgs<ExtArgs> = {}>(args?: Subset<T, User$characterArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly isAdmin: FieldRef<"User", 'Boolean'>
    readonly isBanned: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly character_id: FieldRef<"User", 'Int'>
    readonly phone: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.character
   */
  export type User$characterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterInclude<ExtArgs> | null
    where?: CharacterWhereInput
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Character
   */

  export type AggregateCharacter = {
    _count: CharacterCountAggregateOutputType | null
    _avg: CharacterAvgAggregateOutputType | null
    _sum: CharacterSumAggregateOutputType | null
    _min: CharacterMinAggregateOutputType | null
    _max: CharacterMaxAggregateOutputType | null
  }

  export type CharacterAvgAggregateOutputType = {
    id: number | null
    currentHP: number | null
    maxHP: number | null
    xp: number | null
    level: number | null
    gold: number | null
    head_gear1: number | null
    left_hand_gear2: number | null
    right_hand_gear3: number | null
    foot_gear4: number | null
    chest_gear5: number | null
    backpack1: number | null
    backpack2: number | null
    backpack3: number | null
    backpack4: number | null
    backpack5: number | null
    backpack6: number | null
    backpack7: number | null
    backpack8: number | null
    base_attack: number | null
    base_armor: number | null
    base_speed: number | null
    magic_points: number | null
    current_mp: number | null
    stagescompleted: number | null
  }

  export type CharacterSumAggregateOutputType = {
    id: number | null
    currentHP: number | null
    maxHP: number | null
    xp: number | null
    level: number | null
    gold: number | null
    head_gear1: number | null
    left_hand_gear2: number | null
    right_hand_gear3: number | null
    foot_gear4: number | null
    chest_gear5: number | null
    backpack1: number | null
    backpack2: number | null
    backpack3: number | null
    backpack4: number | null
    backpack5: number | null
    backpack6: number | null
    backpack7: number | null
    backpack8: number | null
    base_attack: number | null
    base_armor: number | null
    base_speed: number | null
    magic_points: number | null
    current_mp: number | null
    stagescompleted: number | null
  }

  export type CharacterMinAggregateOutputType = {
    id: number | null
    name: string | null
    gender: string | null
    character_class: string | null
    currentHP: number | null
    maxHP: number | null
    xp: number | null
    level: number | null
    graphicUrl: string | null
    gold: number | null
    head_gear1: number | null
    left_hand_gear2: number | null
    right_hand_gear3: number | null
    foot_gear4: number | null
    chest_gear5: number | null
    backpack1: number | null
    backpack2: number | null
    backpack3: number | null
    backpack4: number | null
    backpack5: number | null
    backpack6: number | null
    backpack7: number | null
    backpack8: number | null
    base_attack: number | null
    base_armor: number | null
    base_speed: number | null
    magic_points: number | null
    current_mp: number | null
    isNPC: boolean | null
    location_coordinates: string | null
    stagescompleted: number | null
  }

  export type CharacterMaxAggregateOutputType = {
    id: number | null
    name: string | null
    gender: string | null
    character_class: string | null
    currentHP: number | null
    maxHP: number | null
    xp: number | null
    level: number | null
    graphicUrl: string | null
    gold: number | null
    head_gear1: number | null
    left_hand_gear2: number | null
    right_hand_gear3: number | null
    foot_gear4: number | null
    chest_gear5: number | null
    backpack1: number | null
    backpack2: number | null
    backpack3: number | null
    backpack4: number | null
    backpack5: number | null
    backpack6: number | null
    backpack7: number | null
    backpack8: number | null
    base_attack: number | null
    base_armor: number | null
    base_speed: number | null
    magic_points: number | null
    current_mp: number | null
    isNPC: boolean | null
    location_coordinates: string | null
    stagescompleted: number | null
  }

  export type CharacterCountAggregateOutputType = {
    id: number
    name: number
    gender: number
    character_class: number
    currentHP: number
    maxHP: number
    xp: number
    level: number
    graphicUrl: number
    gold: number
    head_gear1: number
    left_hand_gear2: number
    right_hand_gear3: number
    foot_gear4: number
    chest_gear5: number
    backpack1: number
    backpack2: number
    backpack3: number
    backpack4: number
    backpack5: number
    backpack6: number
    backpack7: number
    backpack8: number
    base_attack: number
    base_armor: number
    base_speed: number
    magic_points: number
    current_mp: number
    isNPC: number
    location_coordinates: number
    stagescompleted: number
    _all: number
  }


  export type CharacterAvgAggregateInputType = {
    id?: true
    currentHP?: true
    maxHP?: true
    xp?: true
    level?: true
    gold?: true
    head_gear1?: true
    left_hand_gear2?: true
    right_hand_gear3?: true
    foot_gear4?: true
    chest_gear5?: true
    backpack1?: true
    backpack2?: true
    backpack3?: true
    backpack4?: true
    backpack5?: true
    backpack6?: true
    backpack7?: true
    backpack8?: true
    base_attack?: true
    base_armor?: true
    base_speed?: true
    magic_points?: true
    current_mp?: true
    stagescompleted?: true
  }

  export type CharacterSumAggregateInputType = {
    id?: true
    currentHP?: true
    maxHP?: true
    xp?: true
    level?: true
    gold?: true
    head_gear1?: true
    left_hand_gear2?: true
    right_hand_gear3?: true
    foot_gear4?: true
    chest_gear5?: true
    backpack1?: true
    backpack2?: true
    backpack3?: true
    backpack4?: true
    backpack5?: true
    backpack6?: true
    backpack7?: true
    backpack8?: true
    base_attack?: true
    base_armor?: true
    base_speed?: true
    magic_points?: true
    current_mp?: true
    stagescompleted?: true
  }

  export type CharacterMinAggregateInputType = {
    id?: true
    name?: true
    gender?: true
    character_class?: true
    currentHP?: true
    maxHP?: true
    xp?: true
    level?: true
    graphicUrl?: true
    gold?: true
    head_gear1?: true
    left_hand_gear2?: true
    right_hand_gear3?: true
    foot_gear4?: true
    chest_gear5?: true
    backpack1?: true
    backpack2?: true
    backpack3?: true
    backpack4?: true
    backpack5?: true
    backpack6?: true
    backpack7?: true
    backpack8?: true
    base_attack?: true
    base_armor?: true
    base_speed?: true
    magic_points?: true
    current_mp?: true
    isNPC?: true
    location_coordinates?: true
    stagescompleted?: true
  }

  export type CharacterMaxAggregateInputType = {
    id?: true
    name?: true
    gender?: true
    character_class?: true
    currentHP?: true
    maxHP?: true
    xp?: true
    level?: true
    graphicUrl?: true
    gold?: true
    head_gear1?: true
    left_hand_gear2?: true
    right_hand_gear3?: true
    foot_gear4?: true
    chest_gear5?: true
    backpack1?: true
    backpack2?: true
    backpack3?: true
    backpack4?: true
    backpack5?: true
    backpack6?: true
    backpack7?: true
    backpack8?: true
    base_attack?: true
    base_armor?: true
    base_speed?: true
    magic_points?: true
    current_mp?: true
    isNPC?: true
    location_coordinates?: true
    stagescompleted?: true
  }

  export type CharacterCountAggregateInputType = {
    id?: true
    name?: true
    gender?: true
    character_class?: true
    currentHP?: true
    maxHP?: true
    xp?: true
    level?: true
    graphicUrl?: true
    gold?: true
    head_gear1?: true
    left_hand_gear2?: true
    right_hand_gear3?: true
    foot_gear4?: true
    chest_gear5?: true
    backpack1?: true
    backpack2?: true
    backpack3?: true
    backpack4?: true
    backpack5?: true
    backpack6?: true
    backpack7?: true
    backpack8?: true
    base_attack?: true
    base_armor?: true
    base_speed?: true
    magic_points?: true
    current_mp?: true
    isNPC?: true
    location_coordinates?: true
    stagescompleted?: true
    _all?: true
  }

  export type CharacterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Character to aggregate.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Characters
    **/
    _count?: true | CharacterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CharacterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CharacterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CharacterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CharacterMaxAggregateInputType
  }

  export type GetCharacterAggregateType<T extends CharacterAggregateArgs> = {
        [P in keyof T & keyof AggregateCharacter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCharacter[P]>
      : GetScalarType<T[P], AggregateCharacter[P]>
  }




  export type CharacterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CharacterWhereInput
    orderBy?: CharacterOrderByWithAggregationInput | CharacterOrderByWithAggregationInput[]
    by: CharacterScalarFieldEnum[] | CharacterScalarFieldEnum
    having?: CharacterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CharacterCountAggregateInputType | true
    _avg?: CharacterAvgAggregateInputType
    _sum?: CharacterSumAggregateInputType
    _min?: CharacterMinAggregateInputType
    _max?: CharacterMaxAggregateInputType
  }

  export type CharacterGroupByOutputType = {
    id: number
    name: string
    gender: string
    character_class: string
    currentHP: number
    maxHP: number
    xp: number
    level: number
    graphicUrl: string
    gold: number
    head_gear1: number | null
    left_hand_gear2: number | null
    right_hand_gear3: number | null
    foot_gear4: number | null
    chest_gear5: number | null
    backpack1: number
    backpack2: number
    backpack3: number
    backpack4: number
    backpack5: number
    backpack6: number
    backpack7: number
    backpack8: number
    base_attack: number
    base_armor: number
    base_speed: number
    magic_points: number | null
    current_mp: number | null
    isNPC: boolean
    location_coordinates: string | null
    stagescompleted: number
    _count: CharacterCountAggregateOutputType | null
    _avg: CharacterAvgAggregateOutputType | null
    _sum: CharacterSumAggregateOutputType | null
    _min: CharacterMinAggregateOutputType | null
    _max: CharacterMaxAggregateOutputType | null
  }

  type GetCharacterGroupByPayload<T extends CharacterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CharacterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CharacterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CharacterGroupByOutputType[P]>
            : GetScalarType<T[P], CharacterGroupByOutputType[P]>
        }
      >
    >


  export type CharacterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    gender?: boolean
    character_class?: boolean
    currentHP?: boolean
    maxHP?: boolean
    xp?: boolean
    level?: boolean
    graphicUrl?: boolean
    gold?: boolean
    head_gear1?: boolean
    left_hand_gear2?: boolean
    right_hand_gear3?: boolean
    foot_gear4?: boolean
    chest_gear5?: boolean
    backpack1?: boolean
    backpack2?: boolean
    backpack3?: boolean
    backpack4?: boolean
    backpack5?: boolean
    backpack6?: boolean
    backpack7?: boolean
    backpack8?: boolean
    base_attack?: boolean
    base_armor?: boolean
    base_speed?: boolean
    magic_points?: boolean
    current_mp?: boolean
    isNPC?: boolean
    location_coordinates?: boolean
    stagescompleted?: boolean
    user?: boolean | Character$userArgs<ExtArgs>
    inventory?: boolean | Character$inventoryArgs<ExtArgs>
    _count?: boolean | CharacterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["character"]>

  export type CharacterSelectScalar = {
    id?: boolean
    name?: boolean
    gender?: boolean
    character_class?: boolean
    currentHP?: boolean
    maxHP?: boolean
    xp?: boolean
    level?: boolean
    graphicUrl?: boolean
    gold?: boolean
    head_gear1?: boolean
    left_hand_gear2?: boolean
    right_hand_gear3?: boolean
    foot_gear4?: boolean
    chest_gear5?: boolean
    backpack1?: boolean
    backpack2?: boolean
    backpack3?: boolean
    backpack4?: boolean
    backpack5?: boolean
    backpack6?: boolean
    backpack7?: boolean
    backpack8?: boolean
    base_attack?: boolean
    base_armor?: boolean
    base_speed?: boolean
    magic_points?: boolean
    current_mp?: boolean
    isNPC?: boolean
    location_coordinates?: boolean
    stagescompleted?: boolean
  }

  export type CharacterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Character$userArgs<ExtArgs>
    inventory?: boolean | Character$inventoryArgs<ExtArgs>
    _count?: boolean | CharacterCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CharacterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Character"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      inventory: Prisma.$Character_GearPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      gender: string
      character_class: string
      currentHP: number
      maxHP: number
      xp: number
      level: number
      graphicUrl: string
      gold: number
      head_gear1: number | null
      left_hand_gear2: number | null
      right_hand_gear3: number | null
      foot_gear4: number | null
      chest_gear5: number | null
      backpack1: number
      backpack2: number
      backpack3: number
      backpack4: number
      backpack5: number
      backpack6: number
      backpack7: number
      backpack8: number
      base_attack: number
      base_armor: number
      base_speed: number
      magic_points: number | null
      current_mp: number | null
      isNPC: boolean
      location_coordinates: string | null
      stagescompleted: number
    }, ExtArgs["result"]["character"]>
    composites: {}
  }


  type CharacterGetPayload<S extends boolean | null | undefined | CharacterDefaultArgs> = $Result.GetResult<Prisma.$CharacterPayload, S>

  type CharacterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CharacterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CharacterCountAggregateInputType | true
    }

  export interface CharacterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Character'], meta: { name: 'Character' } }
    /**
     * Find zero or one Character that matches the filter.
     * @param {CharacterFindUniqueArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CharacterFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CharacterFindUniqueArgs<ExtArgs>>
    ): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Character that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CharacterFindUniqueOrThrowArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CharacterFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacterFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Character that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFindFirstArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CharacterFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacterFindFirstArgs<ExtArgs>>
    ): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Character that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFindFirstOrThrowArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CharacterFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacterFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Characters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Characters
     * const characters = await prisma.character.findMany()
     * 
     * // Get first 10 Characters
     * const characters = await prisma.character.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const characterWithIdOnly = await prisma.character.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CharacterFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacterFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Character.
     * @param {CharacterCreateArgs} args - Arguments to create a Character.
     * @example
     * // Create one Character
     * const Character = await prisma.character.create({
     *   data: {
     *     // ... data to create a Character
     *   }
     * })
     * 
    **/
    create<T extends CharacterCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CharacterCreateArgs<ExtArgs>>
    ): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Characters.
     *     @param {CharacterCreateManyArgs} args - Arguments to create many Characters.
     *     @example
     *     // Create many Characters
     *     const character = await prisma.character.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CharacterCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacterCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Character.
     * @param {CharacterDeleteArgs} args - Arguments to delete one Character.
     * @example
     * // Delete one Character
     * const Character = await prisma.character.delete({
     *   where: {
     *     // ... filter to delete one Character
     *   }
     * })
     * 
    **/
    delete<T extends CharacterDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CharacterDeleteArgs<ExtArgs>>
    ): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Character.
     * @param {CharacterUpdateArgs} args - Arguments to update one Character.
     * @example
     * // Update one Character
     * const character = await prisma.character.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CharacterUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CharacterUpdateArgs<ExtArgs>>
    ): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Characters.
     * @param {CharacterDeleteManyArgs} args - Arguments to filter Characters to delete.
     * @example
     * // Delete a few Characters
     * const { count } = await prisma.character.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CharacterDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacterDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Characters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Characters
     * const character = await prisma.character.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CharacterUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CharacterUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Character.
     * @param {CharacterUpsertArgs} args - Arguments to update or create a Character.
     * @example
     * // Update or create a Character
     * const character = await prisma.character.upsert({
     *   create: {
     *     // ... data to create a Character
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Character we want to update
     *   }
     * })
    **/
    upsert<T extends CharacterUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CharacterUpsertArgs<ExtArgs>>
    ): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Characters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterCountArgs} args - Arguments to filter Characters to count.
     * @example
     * // Count the number of Characters
     * const count = await prisma.character.count({
     *   where: {
     *     // ... the filter for the Characters we want to count
     *   }
     * })
    **/
    count<T extends CharacterCountArgs>(
      args?: Subset<T, CharacterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CharacterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Character.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CharacterAggregateArgs>(args: Subset<T, CharacterAggregateArgs>): Prisma.PrismaPromise<GetCharacterAggregateType<T>>

    /**
     * Group by Character.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CharacterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CharacterGroupByArgs['orderBy'] }
        : { orderBy?: CharacterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CharacterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCharacterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Character model
   */
  readonly fields: CharacterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Character.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CharacterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends Character$userArgs<ExtArgs> = {}>(args?: Subset<T, Character$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    inventory<T extends Character$inventoryArgs<ExtArgs> = {}>(args?: Subset<T, Character$inventoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Character_GearPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Character model
   */ 
  interface CharacterFieldRefs {
    readonly id: FieldRef<"Character", 'Int'>
    readonly name: FieldRef<"Character", 'String'>
    readonly gender: FieldRef<"Character", 'String'>
    readonly character_class: FieldRef<"Character", 'String'>
    readonly currentHP: FieldRef<"Character", 'Int'>
    readonly maxHP: FieldRef<"Character", 'Int'>
    readonly xp: FieldRef<"Character", 'Int'>
    readonly level: FieldRef<"Character", 'Int'>
    readonly graphicUrl: FieldRef<"Character", 'String'>
    readonly gold: FieldRef<"Character", 'Int'>
    readonly head_gear1: FieldRef<"Character", 'Int'>
    readonly left_hand_gear2: FieldRef<"Character", 'Int'>
    readonly right_hand_gear3: FieldRef<"Character", 'Int'>
    readonly foot_gear4: FieldRef<"Character", 'Int'>
    readonly chest_gear5: FieldRef<"Character", 'Int'>
    readonly backpack1: FieldRef<"Character", 'Int'>
    readonly backpack2: FieldRef<"Character", 'Int'>
    readonly backpack3: FieldRef<"Character", 'Int'>
    readonly backpack4: FieldRef<"Character", 'Int'>
    readonly backpack5: FieldRef<"Character", 'Int'>
    readonly backpack6: FieldRef<"Character", 'Int'>
    readonly backpack7: FieldRef<"Character", 'Int'>
    readonly backpack8: FieldRef<"Character", 'Int'>
    readonly base_attack: FieldRef<"Character", 'Int'>
    readonly base_armor: FieldRef<"Character", 'Int'>
    readonly base_speed: FieldRef<"Character", 'Int'>
    readonly magic_points: FieldRef<"Character", 'Int'>
    readonly current_mp: FieldRef<"Character", 'Int'>
    readonly isNPC: FieldRef<"Character", 'Boolean'>
    readonly location_coordinates: FieldRef<"Character", 'String'>
    readonly stagescompleted: FieldRef<"Character", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Character findUnique
   */
  export type CharacterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where: CharacterWhereUniqueInput
  }


  /**
   * Character findUniqueOrThrow
   */
  export type CharacterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where: CharacterWhereUniqueInput
  }


  /**
   * Character findFirst
   */
  export type CharacterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Characters.
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Characters.
     */
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }


  /**
   * Character findFirstOrThrow
   */
  export type CharacterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Character to fetch.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Characters.
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Characters.
     */
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }


  /**
   * Character findMany
   */
  export type CharacterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter, which Characters to fetch.
     */
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     */
    orderBy?: CharacterOrderByWithRelationInput | CharacterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Characters.
     */
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     */
    skip?: number
    distinct?: CharacterScalarFieldEnum | CharacterScalarFieldEnum[]
  }


  /**
   * Character create
   */
  export type CharacterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * The data needed to create a Character.
     */
    data: XOR<CharacterCreateInput, CharacterUncheckedCreateInput>
  }


  /**
   * Character createMany
   */
  export type CharacterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Characters.
     */
    data: CharacterCreateManyInput | CharacterCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Character update
   */
  export type CharacterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * The data needed to update a Character.
     */
    data: XOR<CharacterUpdateInput, CharacterUncheckedUpdateInput>
    /**
     * Choose, which Character to update.
     */
    where: CharacterWhereUniqueInput
  }


  /**
   * Character updateMany
   */
  export type CharacterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Characters.
     */
    data: XOR<CharacterUpdateManyMutationInput, CharacterUncheckedUpdateManyInput>
    /**
     * Filter which Characters to update
     */
    where?: CharacterWhereInput
  }


  /**
   * Character upsert
   */
  export type CharacterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * The filter to search for the Character to update in case it exists.
     */
    where: CharacterWhereUniqueInput
    /**
     * In case the Character found by the `where` argument doesn't exist, create a new Character with this data.
     */
    create: XOR<CharacterCreateInput, CharacterUncheckedCreateInput>
    /**
     * In case the Character was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CharacterUpdateInput, CharacterUncheckedUpdateInput>
  }


  /**
   * Character delete
   */
  export type CharacterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterInclude<ExtArgs> | null
    /**
     * Filter which Character to delete.
     */
    where: CharacterWhereUniqueInput
  }


  /**
   * Character deleteMany
   */
  export type CharacterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Characters to delete
     */
    where?: CharacterWhereInput
  }


  /**
   * Character.user
   */
  export type Character$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * Character.inventory
   */
  export type Character$inventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Gear
     */
    select?: Character_GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Character_GearInclude<ExtArgs> | null
    where?: Character_GearWhereInput
    orderBy?: Character_GearOrderByWithRelationInput | Character_GearOrderByWithRelationInput[]
    cursor?: Character_GearWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Character_GearScalarFieldEnum | Character_GearScalarFieldEnum[]
  }


  /**
   * Character without action
   */
  export type CharacterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character
     */
    select?: CharacterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterInclude<ExtArgs> | null
  }



  /**
   * Model Character_Gear
   */

  export type AggregateCharacter_Gear = {
    _count: Character_GearCountAggregateOutputType | null
    _avg: Character_GearAvgAggregateOutputType | null
    _sum: Character_GearSumAggregateOutputType | null
    _min: Character_GearMinAggregateOutputType | null
    _max: Character_GearMaxAggregateOutputType | null
  }

  export type Character_GearAvgAggregateOutputType = {
    id: number | null
    character_id: number | null
    gear_id: number | null
  }

  export type Character_GearSumAggregateOutputType = {
    id: number | null
    character_id: number | null
    gear_id: number | null
  }

  export type Character_GearMinAggregateOutputType = {
    id: number | null
    character_id: number | null
    gear_id: number | null
  }

  export type Character_GearMaxAggregateOutputType = {
    id: number | null
    character_id: number | null
    gear_id: number | null
  }

  export type Character_GearCountAggregateOutputType = {
    id: number
    character_id: number
    gear_id: number
    _all: number
  }


  export type Character_GearAvgAggregateInputType = {
    id?: true
    character_id?: true
    gear_id?: true
  }

  export type Character_GearSumAggregateInputType = {
    id?: true
    character_id?: true
    gear_id?: true
  }

  export type Character_GearMinAggregateInputType = {
    id?: true
    character_id?: true
    gear_id?: true
  }

  export type Character_GearMaxAggregateInputType = {
    id?: true
    character_id?: true
    gear_id?: true
  }

  export type Character_GearCountAggregateInputType = {
    id?: true
    character_id?: true
    gear_id?: true
    _all?: true
  }

  export type Character_GearAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Character_Gear to aggregate.
     */
    where?: Character_GearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Character_Gears to fetch.
     */
    orderBy?: Character_GearOrderByWithRelationInput | Character_GearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Character_GearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Character_Gears from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Character_Gears.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Character_Gears
    **/
    _count?: true | Character_GearCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Character_GearAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Character_GearSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Character_GearMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Character_GearMaxAggregateInputType
  }

  export type GetCharacter_GearAggregateType<T extends Character_GearAggregateArgs> = {
        [P in keyof T & keyof AggregateCharacter_Gear]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCharacter_Gear[P]>
      : GetScalarType<T[P], AggregateCharacter_Gear[P]>
  }




  export type Character_GearGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Character_GearWhereInput
    orderBy?: Character_GearOrderByWithAggregationInput | Character_GearOrderByWithAggregationInput[]
    by: Character_GearScalarFieldEnum[] | Character_GearScalarFieldEnum
    having?: Character_GearScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Character_GearCountAggregateInputType | true
    _avg?: Character_GearAvgAggregateInputType
    _sum?: Character_GearSumAggregateInputType
    _min?: Character_GearMinAggregateInputType
    _max?: Character_GearMaxAggregateInputType
  }

  export type Character_GearGroupByOutputType = {
    id: number
    character_id: number
    gear_id: number
    _count: Character_GearCountAggregateOutputType | null
    _avg: Character_GearAvgAggregateOutputType | null
    _sum: Character_GearSumAggregateOutputType | null
    _min: Character_GearMinAggregateOutputType | null
    _max: Character_GearMaxAggregateOutputType | null
  }

  type GetCharacter_GearGroupByPayload<T extends Character_GearGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Character_GearGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Character_GearGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Character_GearGroupByOutputType[P]>
            : GetScalarType<T[P], Character_GearGroupByOutputType[P]>
        }
      >
    >


  export type Character_GearSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    character_id?: boolean
    gear_id?: boolean
    Character?: boolean | CharacterDefaultArgs<ExtArgs>
    gear?: boolean | GearDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["character_Gear"]>

  export type Character_GearSelectScalar = {
    id?: boolean
    character_id?: boolean
    gear_id?: boolean
  }

  export type Character_GearInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Character?: boolean | CharacterDefaultArgs<ExtArgs>
    gear?: boolean | GearDefaultArgs<ExtArgs>
  }


  export type $Character_GearPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Character_Gear"
    objects: {
      Character: Prisma.$CharacterPayload<ExtArgs>
      gear: Prisma.$GearPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      character_id: number
      gear_id: number
    }, ExtArgs["result"]["character_Gear"]>
    composites: {}
  }


  type Character_GearGetPayload<S extends boolean | null | undefined | Character_GearDefaultArgs> = $Result.GetResult<Prisma.$Character_GearPayload, S>

  type Character_GearCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Character_GearFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Character_GearCountAggregateInputType | true
    }

  export interface Character_GearDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Character_Gear'], meta: { name: 'Character_Gear' } }
    /**
     * Find zero or one Character_Gear that matches the filter.
     * @param {Character_GearFindUniqueArgs} args - Arguments to find a Character_Gear
     * @example
     * // Get one Character_Gear
     * const character_Gear = await prisma.character_Gear.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Character_GearFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Character_GearFindUniqueArgs<ExtArgs>>
    ): Prisma__Character_GearClient<$Result.GetResult<Prisma.$Character_GearPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Character_Gear that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Character_GearFindUniqueOrThrowArgs} args - Arguments to find a Character_Gear
     * @example
     * // Get one Character_Gear
     * const character_Gear = await prisma.character_Gear.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Character_GearFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Character_GearFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Character_GearClient<$Result.GetResult<Prisma.$Character_GearPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Character_Gear that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_GearFindFirstArgs} args - Arguments to find a Character_Gear
     * @example
     * // Get one Character_Gear
     * const character_Gear = await prisma.character_Gear.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Character_GearFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Character_GearFindFirstArgs<ExtArgs>>
    ): Prisma__Character_GearClient<$Result.GetResult<Prisma.$Character_GearPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Character_Gear that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_GearFindFirstOrThrowArgs} args - Arguments to find a Character_Gear
     * @example
     * // Get one Character_Gear
     * const character_Gear = await prisma.character_Gear.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Character_GearFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Character_GearFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Character_GearClient<$Result.GetResult<Prisma.$Character_GearPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Character_Gears that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_GearFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Character_Gears
     * const character_Gears = await prisma.character_Gear.findMany()
     * 
     * // Get first 10 Character_Gears
     * const character_Gears = await prisma.character_Gear.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const character_GearWithIdOnly = await prisma.character_Gear.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Character_GearFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Character_GearFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Character_GearPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Character_Gear.
     * @param {Character_GearCreateArgs} args - Arguments to create a Character_Gear.
     * @example
     * // Create one Character_Gear
     * const Character_Gear = await prisma.character_Gear.create({
     *   data: {
     *     // ... data to create a Character_Gear
     *   }
     * })
     * 
    **/
    create<T extends Character_GearCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Character_GearCreateArgs<ExtArgs>>
    ): Prisma__Character_GearClient<$Result.GetResult<Prisma.$Character_GearPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Character_Gears.
     *     @param {Character_GearCreateManyArgs} args - Arguments to create many Character_Gears.
     *     @example
     *     // Create many Character_Gears
     *     const character_Gear = await prisma.character_Gear.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Character_GearCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Character_GearCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Character_Gear.
     * @param {Character_GearDeleteArgs} args - Arguments to delete one Character_Gear.
     * @example
     * // Delete one Character_Gear
     * const Character_Gear = await prisma.character_Gear.delete({
     *   where: {
     *     // ... filter to delete one Character_Gear
     *   }
     * })
     * 
    **/
    delete<T extends Character_GearDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Character_GearDeleteArgs<ExtArgs>>
    ): Prisma__Character_GearClient<$Result.GetResult<Prisma.$Character_GearPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Character_Gear.
     * @param {Character_GearUpdateArgs} args - Arguments to update one Character_Gear.
     * @example
     * // Update one Character_Gear
     * const character_Gear = await prisma.character_Gear.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Character_GearUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Character_GearUpdateArgs<ExtArgs>>
    ): Prisma__Character_GearClient<$Result.GetResult<Prisma.$Character_GearPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Character_Gears.
     * @param {Character_GearDeleteManyArgs} args - Arguments to filter Character_Gears to delete.
     * @example
     * // Delete a few Character_Gears
     * const { count } = await prisma.character_Gear.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Character_GearDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Character_GearDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Character_Gears.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_GearUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Character_Gears
     * const character_Gear = await prisma.character_Gear.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Character_GearUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Character_GearUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Character_Gear.
     * @param {Character_GearUpsertArgs} args - Arguments to update or create a Character_Gear.
     * @example
     * // Update or create a Character_Gear
     * const character_Gear = await prisma.character_Gear.upsert({
     *   create: {
     *     // ... data to create a Character_Gear
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Character_Gear we want to update
     *   }
     * })
    **/
    upsert<T extends Character_GearUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Character_GearUpsertArgs<ExtArgs>>
    ): Prisma__Character_GearClient<$Result.GetResult<Prisma.$Character_GearPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Character_Gears.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_GearCountArgs} args - Arguments to filter Character_Gears to count.
     * @example
     * // Count the number of Character_Gears
     * const count = await prisma.character_Gear.count({
     *   where: {
     *     // ... the filter for the Character_Gears we want to count
     *   }
     * })
    **/
    count<T extends Character_GearCountArgs>(
      args?: Subset<T, Character_GearCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Character_GearCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Character_Gear.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_GearAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Character_GearAggregateArgs>(args: Subset<T, Character_GearAggregateArgs>): Prisma.PrismaPromise<GetCharacter_GearAggregateType<T>>

    /**
     * Group by Character_Gear.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_GearGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Character_GearGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Character_GearGroupByArgs['orderBy'] }
        : { orderBy?: Character_GearGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Character_GearGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCharacter_GearGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Character_Gear model
   */
  readonly fields: Character_GearFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Character_Gear.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Character_GearClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Character<T extends CharacterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CharacterDefaultArgs<ExtArgs>>): Prisma__CharacterClient<$Result.GetResult<Prisma.$CharacterPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    gear<T extends GearDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GearDefaultArgs<ExtArgs>>): Prisma__GearClient<$Result.GetResult<Prisma.$GearPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Character_Gear model
   */ 
  interface Character_GearFieldRefs {
    readonly id: FieldRef<"Character_Gear", 'Int'>
    readonly character_id: FieldRef<"Character_Gear", 'Int'>
    readonly gear_id: FieldRef<"Character_Gear", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Character_Gear findUnique
   */
  export type Character_GearFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Gear
     */
    select?: Character_GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Character_GearInclude<ExtArgs> | null
    /**
     * Filter, which Character_Gear to fetch.
     */
    where: Character_GearWhereUniqueInput
  }


  /**
   * Character_Gear findUniqueOrThrow
   */
  export type Character_GearFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Gear
     */
    select?: Character_GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Character_GearInclude<ExtArgs> | null
    /**
     * Filter, which Character_Gear to fetch.
     */
    where: Character_GearWhereUniqueInput
  }


  /**
   * Character_Gear findFirst
   */
  export type Character_GearFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Gear
     */
    select?: Character_GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Character_GearInclude<ExtArgs> | null
    /**
     * Filter, which Character_Gear to fetch.
     */
    where?: Character_GearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Character_Gears to fetch.
     */
    orderBy?: Character_GearOrderByWithRelationInput | Character_GearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Character_Gears.
     */
    cursor?: Character_GearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Character_Gears from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Character_Gears.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Character_Gears.
     */
    distinct?: Character_GearScalarFieldEnum | Character_GearScalarFieldEnum[]
  }


  /**
   * Character_Gear findFirstOrThrow
   */
  export type Character_GearFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Gear
     */
    select?: Character_GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Character_GearInclude<ExtArgs> | null
    /**
     * Filter, which Character_Gear to fetch.
     */
    where?: Character_GearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Character_Gears to fetch.
     */
    orderBy?: Character_GearOrderByWithRelationInput | Character_GearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Character_Gears.
     */
    cursor?: Character_GearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Character_Gears from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Character_Gears.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Character_Gears.
     */
    distinct?: Character_GearScalarFieldEnum | Character_GearScalarFieldEnum[]
  }


  /**
   * Character_Gear findMany
   */
  export type Character_GearFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Gear
     */
    select?: Character_GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Character_GearInclude<ExtArgs> | null
    /**
     * Filter, which Character_Gears to fetch.
     */
    where?: Character_GearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Character_Gears to fetch.
     */
    orderBy?: Character_GearOrderByWithRelationInput | Character_GearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Character_Gears.
     */
    cursor?: Character_GearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Character_Gears from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Character_Gears.
     */
    skip?: number
    distinct?: Character_GearScalarFieldEnum | Character_GearScalarFieldEnum[]
  }


  /**
   * Character_Gear create
   */
  export type Character_GearCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Gear
     */
    select?: Character_GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Character_GearInclude<ExtArgs> | null
    /**
     * The data needed to create a Character_Gear.
     */
    data: XOR<Character_GearCreateInput, Character_GearUncheckedCreateInput>
  }


  /**
   * Character_Gear createMany
   */
  export type Character_GearCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Character_Gears.
     */
    data: Character_GearCreateManyInput | Character_GearCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Character_Gear update
   */
  export type Character_GearUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Gear
     */
    select?: Character_GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Character_GearInclude<ExtArgs> | null
    /**
     * The data needed to update a Character_Gear.
     */
    data: XOR<Character_GearUpdateInput, Character_GearUncheckedUpdateInput>
    /**
     * Choose, which Character_Gear to update.
     */
    where: Character_GearWhereUniqueInput
  }


  /**
   * Character_Gear updateMany
   */
  export type Character_GearUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Character_Gears.
     */
    data: XOR<Character_GearUpdateManyMutationInput, Character_GearUncheckedUpdateManyInput>
    /**
     * Filter which Character_Gears to update
     */
    where?: Character_GearWhereInput
  }


  /**
   * Character_Gear upsert
   */
  export type Character_GearUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Gear
     */
    select?: Character_GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Character_GearInclude<ExtArgs> | null
    /**
     * The filter to search for the Character_Gear to update in case it exists.
     */
    where: Character_GearWhereUniqueInput
    /**
     * In case the Character_Gear found by the `where` argument doesn't exist, create a new Character_Gear with this data.
     */
    create: XOR<Character_GearCreateInput, Character_GearUncheckedCreateInput>
    /**
     * In case the Character_Gear was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Character_GearUpdateInput, Character_GearUncheckedUpdateInput>
  }


  /**
   * Character_Gear delete
   */
  export type Character_GearDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Gear
     */
    select?: Character_GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Character_GearInclude<ExtArgs> | null
    /**
     * Filter which Character_Gear to delete.
     */
    where: Character_GearWhereUniqueInput
  }


  /**
   * Character_Gear deleteMany
   */
  export type Character_GearDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Character_Gears to delete
     */
    where?: Character_GearWhereInput
  }


  /**
   * Character_Gear without action
   */
  export type Character_GearDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Gear
     */
    select?: Character_GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Character_GearInclude<ExtArgs> | null
  }



  /**
   * Model Gear
   */

  export type AggregateGear = {
    _count: GearCountAggregateOutputType | null
    _avg: GearAvgAggregateOutputType | null
    _sum: GearSumAggregateOutputType | null
    _min: GearMinAggregateOutputType | null
    _max: GearMaxAggregateOutputType | null
  }

  export type GearAvgAggregateOutputType = {
    id: number | null
    attack: number | null
    armor: number | null
    equip_location: number | null
    health_bonus: number | null
    armor_bonus: number | null
    attack_bonus: number | null
    speed_bonus: number | null
    price: number | null
  }

  export type GearSumAggregateOutputType = {
    id: number | null
    attack: number | null
    armor: number | null
    equip_location: number | null
    health_bonus: number | null
    armor_bonus: number | null
    attack_bonus: number | null
    speed_bonus: number | null
    price: number | null
  }

  export type GearMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    attack: number | null
    armor: number | null
    isTwoHanded: boolean | null
    equip_location: number | null
    preferred_class: string | null
    health_bonus: number | null
    armor_bonus: number | null
    attack_bonus: number | null
    speed_bonus: number | null
    graphicUrl: string | null
    price: number | null
  }

  export type GearMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    attack: number | null
    armor: number | null
    isTwoHanded: boolean | null
    equip_location: number | null
    preferred_class: string | null
    health_bonus: number | null
    armor_bonus: number | null
    attack_bonus: number | null
    speed_bonus: number | null
    graphicUrl: string | null
    price: number | null
  }

  export type GearCountAggregateOutputType = {
    id: number
    name: number
    description: number
    attack: number
    armor: number
    isTwoHanded: number
    equip_location: number
    preferred_class: number
    health_bonus: number
    armor_bonus: number
    attack_bonus: number
    speed_bonus: number
    graphicUrl: number
    price: number
    _all: number
  }


  export type GearAvgAggregateInputType = {
    id?: true
    attack?: true
    armor?: true
    equip_location?: true
    health_bonus?: true
    armor_bonus?: true
    attack_bonus?: true
    speed_bonus?: true
    price?: true
  }

  export type GearSumAggregateInputType = {
    id?: true
    attack?: true
    armor?: true
    equip_location?: true
    health_bonus?: true
    armor_bonus?: true
    attack_bonus?: true
    speed_bonus?: true
    price?: true
  }

  export type GearMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    attack?: true
    armor?: true
    isTwoHanded?: true
    equip_location?: true
    preferred_class?: true
    health_bonus?: true
    armor_bonus?: true
    attack_bonus?: true
    speed_bonus?: true
    graphicUrl?: true
    price?: true
  }

  export type GearMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    attack?: true
    armor?: true
    isTwoHanded?: true
    equip_location?: true
    preferred_class?: true
    health_bonus?: true
    armor_bonus?: true
    attack_bonus?: true
    speed_bonus?: true
    graphicUrl?: true
    price?: true
  }

  export type GearCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    attack?: true
    armor?: true
    isTwoHanded?: true
    equip_location?: true
    preferred_class?: true
    health_bonus?: true
    armor_bonus?: true
    attack_bonus?: true
    speed_bonus?: true
    graphicUrl?: true
    price?: true
    _all?: true
  }

  export type GearAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gear to aggregate.
     */
    where?: GearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gears to fetch.
     */
    orderBy?: GearOrderByWithRelationInput | GearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gears from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gears.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Gears
    **/
    _count?: true | GearCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GearAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GearSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GearMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GearMaxAggregateInputType
  }

  export type GetGearAggregateType<T extends GearAggregateArgs> = {
        [P in keyof T & keyof AggregateGear]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGear[P]>
      : GetScalarType<T[P], AggregateGear[P]>
  }




  export type GearGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GearWhereInput
    orderBy?: GearOrderByWithAggregationInput | GearOrderByWithAggregationInput[]
    by: GearScalarFieldEnum[] | GearScalarFieldEnum
    having?: GearScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GearCountAggregateInputType | true
    _avg?: GearAvgAggregateInputType
    _sum?: GearSumAggregateInputType
    _min?: GearMinAggregateInputType
    _max?: GearMaxAggregateInputType
  }

  export type GearGroupByOutputType = {
    id: number
    name: string
    description: string
    attack: number
    armor: number
    isTwoHanded: boolean
    equip_location: number
    preferred_class: string
    health_bonus: number
    armor_bonus: number
    attack_bonus: number
    speed_bonus: number
    graphicUrl: string
    price: number
    _count: GearCountAggregateOutputType | null
    _avg: GearAvgAggregateOutputType | null
    _sum: GearSumAggregateOutputType | null
    _min: GearMinAggregateOutputType | null
    _max: GearMaxAggregateOutputType | null
  }

  type GetGearGroupByPayload<T extends GearGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GearGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GearGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GearGroupByOutputType[P]>
            : GetScalarType<T[P], GearGroupByOutputType[P]>
        }
      >
    >


  export type GearSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    attack?: boolean
    armor?: boolean
    isTwoHanded?: boolean
    equip_location?: boolean
    preferred_class?: boolean
    health_bonus?: boolean
    armor_bonus?: boolean
    attack_bonus?: boolean
    speed_bonus?: boolean
    graphicUrl?: boolean
    price?: boolean
    Character_Gear?: boolean | Gear$Character_GearArgs<ExtArgs>
    _count?: boolean | GearCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gear"]>

  export type GearSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    attack?: boolean
    armor?: boolean
    isTwoHanded?: boolean
    equip_location?: boolean
    preferred_class?: boolean
    health_bonus?: boolean
    armor_bonus?: boolean
    attack_bonus?: boolean
    speed_bonus?: boolean
    graphicUrl?: boolean
    price?: boolean
  }

  export type GearInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Character_Gear?: boolean | Gear$Character_GearArgs<ExtArgs>
    _count?: boolean | GearCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $GearPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Gear"
    objects: {
      Character_Gear: Prisma.$Character_GearPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
      attack: number
      armor: number
      isTwoHanded: boolean
      equip_location: number
      preferred_class: string
      health_bonus: number
      armor_bonus: number
      attack_bonus: number
      speed_bonus: number
      graphicUrl: string
      price: number
    }, ExtArgs["result"]["gear"]>
    composites: {}
  }


  type GearGetPayload<S extends boolean | null | undefined | GearDefaultArgs> = $Result.GetResult<Prisma.$GearPayload, S>

  type GearCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GearFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GearCountAggregateInputType | true
    }

  export interface GearDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Gear'], meta: { name: 'Gear' } }
    /**
     * Find zero or one Gear that matches the filter.
     * @param {GearFindUniqueArgs} args - Arguments to find a Gear
     * @example
     * // Get one Gear
     * const gear = await prisma.gear.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GearFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GearFindUniqueArgs<ExtArgs>>
    ): Prisma__GearClient<$Result.GetResult<Prisma.$GearPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Gear that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GearFindUniqueOrThrowArgs} args - Arguments to find a Gear
     * @example
     * // Get one Gear
     * const gear = await prisma.gear.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GearFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GearFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GearClient<$Result.GetResult<Prisma.$GearPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Gear that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GearFindFirstArgs} args - Arguments to find a Gear
     * @example
     * // Get one Gear
     * const gear = await prisma.gear.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GearFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GearFindFirstArgs<ExtArgs>>
    ): Prisma__GearClient<$Result.GetResult<Prisma.$GearPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Gear that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GearFindFirstOrThrowArgs} args - Arguments to find a Gear
     * @example
     * // Get one Gear
     * const gear = await prisma.gear.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GearFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GearFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GearClient<$Result.GetResult<Prisma.$GearPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Gears that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GearFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Gears
     * const gears = await prisma.gear.findMany()
     * 
     * // Get first 10 Gears
     * const gears = await prisma.gear.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gearWithIdOnly = await prisma.gear.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GearFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GearFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GearPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Gear.
     * @param {GearCreateArgs} args - Arguments to create a Gear.
     * @example
     * // Create one Gear
     * const Gear = await prisma.gear.create({
     *   data: {
     *     // ... data to create a Gear
     *   }
     * })
     * 
    **/
    create<T extends GearCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GearCreateArgs<ExtArgs>>
    ): Prisma__GearClient<$Result.GetResult<Prisma.$GearPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Gears.
     *     @param {GearCreateManyArgs} args - Arguments to create many Gears.
     *     @example
     *     // Create many Gears
     *     const gear = await prisma.gear.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GearCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GearCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Gear.
     * @param {GearDeleteArgs} args - Arguments to delete one Gear.
     * @example
     * // Delete one Gear
     * const Gear = await prisma.gear.delete({
     *   where: {
     *     // ... filter to delete one Gear
     *   }
     * })
     * 
    **/
    delete<T extends GearDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GearDeleteArgs<ExtArgs>>
    ): Prisma__GearClient<$Result.GetResult<Prisma.$GearPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Gear.
     * @param {GearUpdateArgs} args - Arguments to update one Gear.
     * @example
     * // Update one Gear
     * const gear = await prisma.gear.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GearUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GearUpdateArgs<ExtArgs>>
    ): Prisma__GearClient<$Result.GetResult<Prisma.$GearPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Gears.
     * @param {GearDeleteManyArgs} args - Arguments to filter Gears to delete.
     * @example
     * // Delete a few Gears
     * const { count } = await prisma.gear.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GearDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GearDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gears.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GearUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Gears
     * const gear = await prisma.gear.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GearUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GearUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Gear.
     * @param {GearUpsertArgs} args - Arguments to update or create a Gear.
     * @example
     * // Update or create a Gear
     * const gear = await prisma.gear.upsert({
     *   create: {
     *     // ... data to create a Gear
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gear we want to update
     *   }
     * })
    **/
    upsert<T extends GearUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GearUpsertArgs<ExtArgs>>
    ): Prisma__GearClient<$Result.GetResult<Prisma.$GearPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Gears.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GearCountArgs} args - Arguments to filter Gears to count.
     * @example
     * // Count the number of Gears
     * const count = await prisma.gear.count({
     *   where: {
     *     // ... the filter for the Gears we want to count
     *   }
     * })
    **/
    count<T extends GearCountArgs>(
      args?: Subset<T, GearCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GearCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gear.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GearAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GearAggregateArgs>(args: Subset<T, GearAggregateArgs>): Prisma.PrismaPromise<GetGearAggregateType<T>>

    /**
     * Group by Gear.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GearGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GearGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GearGroupByArgs['orderBy'] }
        : { orderBy?: GearGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GearGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGearGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Gear model
   */
  readonly fields: GearFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Gear.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GearClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Character_Gear<T extends Gear$Character_GearArgs<ExtArgs> = {}>(args?: Subset<T, Gear$Character_GearArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Character_GearPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Gear model
   */ 
  interface GearFieldRefs {
    readonly id: FieldRef<"Gear", 'Int'>
    readonly name: FieldRef<"Gear", 'String'>
    readonly description: FieldRef<"Gear", 'String'>
    readonly attack: FieldRef<"Gear", 'Int'>
    readonly armor: FieldRef<"Gear", 'Int'>
    readonly isTwoHanded: FieldRef<"Gear", 'Boolean'>
    readonly equip_location: FieldRef<"Gear", 'Int'>
    readonly preferred_class: FieldRef<"Gear", 'String'>
    readonly health_bonus: FieldRef<"Gear", 'Int'>
    readonly armor_bonus: FieldRef<"Gear", 'Int'>
    readonly attack_bonus: FieldRef<"Gear", 'Int'>
    readonly speed_bonus: FieldRef<"Gear", 'Int'>
    readonly graphicUrl: FieldRef<"Gear", 'String'>
    readonly price: FieldRef<"Gear", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Gear findUnique
   */
  export type GearFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gear
     */
    select?: GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GearInclude<ExtArgs> | null
    /**
     * Filter, which Gear to fetch.
     */
    where: GearWhereUniqueInput
  }


  /**
   * Gear findUniqueOrThrow
   */
  export type GearFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gear
     */
    select?: GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GearInclude<ExtArgs> | null
    /**
     * Filter, which Gear to fetch.
     */
    where: GearWhereUniqueInput
  }


  /**
   * Gear findFirst
   */
  export type GearFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gear
     */
    select?: GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GearInclude<ExtArgs> | null
    /**
     * Filter, which Gear to fetch.
     */
    where?: GearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gears to fetch.
     */
    orderBy?: GearOrderByWithRelationInput | GearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gears.
     */
    cursor?: GearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gears from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gears.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gears.
     */
    distinct?: GearScalarFieldEnum | GearScalarFieldEnum[]
  }


  /**
   * Gear findFirstOrThrow
   */
  export type GearFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gear
     */
    select?: GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GearInclude<ExtArgs> | null
    /**
     * Filter, which Gear to fetch.
     */
    where?: GearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gears to fetch.
     */
    orderBy?: GearOrderByWithRelationInput | GearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gears.
     */
    cursor?: GearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gears from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gears.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gears.
     */
    distinct?: GearScalarFieldEnum | GearScalarFieldEnum[]
  }


  /**
   * Gear findMany
   */
  export type GearFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gear
     */
    select?: GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GearInclude<ExtArgs> | null
    /**
     * Filter, which Gears to fetch.
     */
    where?: GearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gears to fetch.
     */
    orderBy?: GearOrderByWithRelationInput | GearOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Gears.
     */
    cursor?: GearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gears from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gears.
     */
    skip?: number
    distinct?: GearScalarFieldEnum | GearScalarFieldEnum[]
  }


  /**
   * Gear create
   */
  export type GearCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gear
     */
    select?: GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GearInclude<ExtArgs> | null
    /**
     * The data needed to create a Gear.
     */
    data: XOR<GearCreateInput, GearUncheckedCreateInput>
  }


  /**
   * Gear createMany
   */
  export type GearCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Gears.
     */
    data: GearCreateManyInput | GearCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Gear update
   */
  export type GearUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gear
     */
    select?: GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GearInclude<ExtArgs> | null
    /**
     * The data needed to update a Gear.
     */
    data: XOR<GearUpdateInput, GearUncheckedUpdateInput>
    /**
     * Choose, which Gear to update.
     */
    where: GearWhereUniqueInput
  }


  /**
   * Gear updateMany
   */
  export type GearUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Gears.
     */
    data: XOR<GearUpdateManyMutationInput, GearUncheckedUpdateManyInput>
    /**
     * Filter which Gears to update
     */
    where?: GearWhereInput
  }


  /**
   * Gear upsert
   */
  export type GearUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gear
     */
    select?: GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GearInclude<ExtArgs> | null
    /**
     * The filter to search for the Gear to update in case it exists.
     */
    where: GearWhereUniqueInput
    /**
     * In case the Gear found by the `where` argument doesn't exist, create a new Gear with this data.
     */
    create: XOR<GearCreateInput, GearUncheckedCreateInput>
    /**
     * In case the Gear was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GearUpdateInput, GearUncheckedUpdateInput>
  }


  /**
   * Gear delete
   */
  export type GearDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gear
     */
    select?: GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GearInclude<ExtArgs> | null
    /**
     * Filter which Gear to delete.
     */
    where: GearWhereUniqueInput
  }


  /**
   * Gear deleteMany
   */
  export type GearDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gears to delete
     */
    where?: GearWhereInput
  }


  /**
   * Gear.Character_Gear
   */
  export type Gear$Character_GearArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Gear
     */
    select?: Character_GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Character_GearInclude<ExtArgs> | null
    where?: Character_GearWhereInput
    orderBy?: Character_GearOrderByWithRelationInput | Character_GearOrderByWithRelationInput[]
    cursor?: Character_GearWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Character_GearScalarFieldEnum | Character_GearScalarFieldEnum[]
  }


  /**
   * Gear without action
   */
  export type GearDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gear
     */
    select?: GearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GearInclude<ExtArgs> | null
  }



  /**
   * Model Character_Class
   */

  export type AggregateCharacter_Class = {
    _count: Character_ClassCountAggregateOutputType | null
    _avg: Character_ClassAvgAggregateOutputType | null
    _sum: Character_ClassSumAggregateOutputType | null
    _min: Character_ClassMinAggregateOutputType | null
    _max: Character_ClassMaxAggregateOutputType | null
  }

  export type Character_ClassAvgAggregateOutputType = {
    id: number | null
    beginning_attack: number | null
    beginning_armor: number | null
    beginning_speed: number | null
    beginning_hp: number | null
  }

  export type Character_ClassSumAggregateOutputType = {
    id: number | null
    beginning_attack: number | null
    beginning_armor: number | null
    beginning_speed: number | null
    beginning_hp: number | null
  }

  export type Character_ClassMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    beginning_attack: number | null
    beginning_armor: number | null
    beginning_speed: number | null
    beginning_hp: number | null
    graphicUrl: string | null
  }

  export type Character_ClassMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    beginning_attack: number | null
    beginning_armor: number | null
    beginning_speed: number | null
    beginning_hp: number | null
    graphicUrl: string | null
  }

  export type Character_ClassCountAggregateOutputType = {
    id: number
    name: number
    description: number
    beginning_attack: number
    beginning_armor: number
    beginning_speed: number
    beginning_hp: number
    graphicUrl: number
    _all: number
  }


  export type Character_ClassAvgAggregateInputType = {
    id?: true
    beginning_attack?: true
    beginning_armor?: true
    beginning_speed?: true
    beginning_hp?: true
  }

  export type Character_ClassSumAggregateInputType = {
    id?: true
    beginning_attack?: true
    beginning_armor?: true
    beginning_speed?: true
    beginning_hp?: true
  }

  export type Character_ClassMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    beginning_attack?: true
    beginning_armor?: true
    beginning_speed?: true
    beginning_hp?: true
    graphicUrl?: true
  }

  export type Character_ClassMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    beginning_attack?: true
    beginning_armor?: true
    beginning_speed?: true
    beginning_hp?: true
    graphicUrl?: true
  }

  export type Character_ClassCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    beginning_attack?: true
    beginning_armor?: true
    beginning_speed?: true
    beginning_hp?: true
    graphicUrl?: true
    _all?: true
  }

  export type Character_ClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Character_Class to aggregate.
     */
    where?: Character_ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Character_Classes to fetch.
     */
    orderBy?: Character_ClassOrderByWithRelationInput | Character_ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Character_ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Character_Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Character_Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Character_Classes
    **/
    _count?: true | Character_ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Character_ClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Character_ClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Character_ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Character_ClassMaxAggregateInputType
  }

  export type GetCharacter_ClassAggregateType<T extends Character_ClassAggregateArgs> = {
        [P in keyof T & keyof AggregateCharacter_Class]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCharacter_Class[P]>
      : GetScalarType<T[P], AggregateCharacter_Class[P]>
  }




  export type Character_ClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Character_ClassWhereInput
    orderBy?: Character_ClassOrderByWithAggregationInput | Character_ClassOrderByWithAggregationInput[]
    by: Character_ClassScalarFieldEnum[] | Character_ClassScalarFieldEnum
    having?: Character_ClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Character_ClassCountAggregateInputType | true
    _avg?: Character_ClassAvgAggregateInputType
    _sum?: Character_ClassSumAggregateInputType
    _min?: Character_ClassMinAggregateInputType
    _max?: Character_ClassMaxAggregateInputType
  }

  export type Character_ClassGroupByOutputType = {
    id: number
    name: string
    description: string
    beginning_attack: number
    beginning_armor: number
    beginning_speed: number
    beginning_hp: number
    graphicUrl: string
    _count: Character_ClassCountAggregateOutputType | null
    _avg: Character_ClassAvgAggregateOutputType | null
    _sum: Character_ClassSumAggregateOutputType | null
    _min: Character_ClassMinAggregateOutputType | null
    _max: Character_ClassMaxAggregateOutputType | null
  }

  type GetCharacter_ClassGroupByPayload<T extends Character_ClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Character_ClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Character_ClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Character_ClassGroupByOutputType[P]>
            : GetScalarType<T[P], Character_ClassGroupByOutputType[P]>
        }
      >
    >


  export type Character_ClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    beginning_attack?: boolean
    beginning_armor?: boolean
    beginning_speed?: boolean
    beginning_hp?: boolean
    graphicUrl?: boolean
  }, ExtArgs["result"]["character_Class"]>

  export type Character_ClassSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    beginning_attack?: boolean
    beginning_armor?: boolean
    beginning_speed?: boolean
    beginning_hp?: boolean
    graphicUrl?: boolean
  }


  export type $Character_ClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Character_Class"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
      beginning_attack: number
      beginning_armor: number
      beginning_speed: number
      beginning_hp: number
      graphicUrl: string
    }, ExtArgs["result"]["character_Class"]>
    composites: {}
  }


  type Character_ClassGetPayload<S extends boolean | null | undefined | Character_ClassDefaultArgs> = $Result.GetResult<Prisma.$Character_ClassPayload, S>

  type Character_ClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Character_ClassFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Character_ClassCountAggregateInputType | true
    }

  export interface Character_ClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Character_Class'], meta: { name: 'Character_Class' } }
    /**
     * Find zero or one Character_Class that matches the filter.
     * @param {Character_ClassFindUniqueArgs} args - Arguments to find a Character_Class
     * @example
     * // Get one Character_Class
     * const character_Class = await prisma.character_Class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Character_ClassFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Character_ClassFindUniqueArgs<ExtArgs>>
    ): Prisma__Character_ClassClient<$Result.GetResult<Prisma.$Character_ClassPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Character_Class that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Character_ClassFindUniqueOrThrowArgs} args - Arguments to find a Character_Class
     * @example
     * // Get one Character_Class
     * const character_Class = await prisma.character_Class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Character_ClassFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Character_ClassFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Character_ClassClient<$Result.GetResult<Prisma.$Character_ClassPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Character_Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_ClassFindFirstArgs} args - Arguments to find a Character_Class
     * @example
     * // Get one Character_Class
     * const character_Class = await prisma.character_Class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Character_ClassFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Character_ClassFindFirstArgs<ExtArgs>>
    ): Prisma__Character_ClassClient<$Result.GetResult<Prisma.$Character_ClassPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Character_Class that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_ClassFindFirstOrThrowArgs} args - Arguments to find a Character_Class
     * @example
     * // Get one Character_Class
     * const character_Class = await prisma.character_Class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Character_ClassFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Character_ClassFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Character_ClassClient<$Result.GetResult<Prisma.$Character_ClassPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Character_Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_ClassFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Character_Classes
     * const character_Classes = await prisma.character_Class.findMany()
     * 
     * // Get first 10 Character_Classes
     * const character_Classes = await prisma.character_Class.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const character_ClassWithIdOnly = await prisma.character_Class.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Character_ClassFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Character_ClassFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Character_ClassPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Character_Class.
     * @param {Character_ClassCreateArgs} args - Arguments to create a Character_Class.
     * @example
     * // Create one Character_Class
     * const Character_Class = await prisma.character_Class.create({
     *   data: {
     *     // ... data to create a Character_Class
     *   }
     * })
     * 
    **/
    create<T extends Character_ClassCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Character_ClassCreateArgs<ExtArgs>>
    ): Prisma__Character_ClassClient<$Result.GetResult<Prisma.$Character_ClassPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Character_Classes.
     *     @param {Character_ClassCreateManyArgs} args - Arguments to create many Character_Classes.
     *     @example
     *     // Create many Character_Classes
     *     const character_Class = await prisma.character_Class.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Character_ClassCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Character_ClassCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Character_Class.
     * @param {Character_ClassDeleteArgs} args - Arguments to delete one Character_Class.
     * @example
     * // Delete one Character_Class
     * const Character_Class = await prisma.character_Class.delete({
     *   where: {
     *     // ... filter to delete one Character_Class
     *   }
     * })
     * 
    **/
    delete<T extends Character_ClassDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Character_ClassDeleteArgs<ExtArgs>>
    ): Prisma__Character_ClassClient<$Result.GetResult<Prisma.$Character_ClassPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Character_Class.
     * @param {Character_ClassUpdateArgs} args - Arguments to update one Character_Class.
     * @example
     * // Update one Character_Class
     * const character_Class = await prisma.character_Class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Character_ClassUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Character_ClassUpdateArgs<ExtArgs>>
    ): Prisma__Character_ClassClient<$Result.GetResult<Prisma.$Character_ClassPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Character_Classes.
     * @param {Character_ClassDeleteManyArgs} args - Arguments to filter Character_Classes to delete.
     * @example
     * // Delete a few Character_Classes
     * const { count } = await prisma.character_Class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Character_ClassDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Character_ClassDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Character_Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Character_Classes
     * const character_Class = await prisma.character_Class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Character_ClassUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Character_ClassUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Character_Class.
     * @param {Character_ClassUpsertArgs} args - Arguments to update or create a Character_Class.
     * @example
     * // Update or create a Character_Class
     * const character_Class = await prisma.character_Class.upsert({
     *   create: {
     *     // ... data to create a Character_Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Character_Class we want to update
     *   }
     * })
    **/
    upsert<T extends Character_ClassUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Character_ClassUpsertArgs<ExtArgs>>
    ): Prisma__Character_ClassClient<$Result.GetResult<Prisma.$Character_ClassPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Character_Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_ClassCountArgs} args - Arguments to filter Character_Classes to count.
     * @example
     * // Count the number of Character_Classes
     * const count = await prisma.character_Class.count({
     *   where: {
     *     // ... the filter for the Character_Classes we want to count
     *   }
     * })
    **/
    count<T extends Character_ClassCountArgs>(
      args?: Subset<T, Character_ClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Character_ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Character_Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Character_ClassAggregateArgs>(args: Subset<T, Character_ClassAggregateArgs>): Prisma.PrismaPromise<GetCharacter_ClassAggregateType<T>>

    /**
     * Group by Character_Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Character_ClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Character_ClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Character_ClassGroupByArgs['orderBy'] }
        : { orderBy?: Character_ClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Character_ClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCharacter_ClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Character_Class model
   */
  readonly fields: Character_ClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Character_Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Character_ClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Character_Class model
   */ 
  interface Character_ClassFieldRefs {
    readonly id: FieldRef<"Character_Class", 'Int'>
    readonly name: FieldRef<"Character_Class", 'String'>
    readonly description: FieldRef<"Character_Class", 'String'>
    readonly beginning_attack: FieldRef<"Character_Class", 'Int'>
    readonly beginning_armor: FieldRef<"Character_Class", 'Int'>
    readonly beginning_speed: FieldRef<"Character_Class", 'Int'>
    readonly beginning_hp: FieldRef<"Character_Class", 'Int'>
    readonly graphicUrl: FieldRef<"Character_Class", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Character_Class findUnique
   */
  export type Character_ClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Class
     */
    select?: Character_ClassSelect<ExtArgs> | null
    /**
     * Filter, which Character_Class to fetch.
     */
    where: Character_ClassWhereUniqueInput
  }


  /**
   * Character_Class findUniqueOrThrow
   */
  export type Character_ClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Class
     */
    select?: Character_ClassSelect<ExtArgs> | null
    /**
     * Filter, which Character_Class to fetch.
     */
    where: Character_ClassWhereUniqueInput
  }


  /**
   * Character_Class findFirst
   */
  export type Character_ClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Class
     */
    select?: Character_ClassSelect<ExtArgs> | null
    /**
     * Filter, which Character_Class to fetch.
     */
    where?: Character_ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Character_Classes to fetch.
     */
    orderBy?: Character_ClassOrderByWithRelationInput | Character_ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Character_Classes.
     */
    cursor?: Character_ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Character_Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Character_Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Character_Classes.
     */
    distinct?: Character_ClassScalarFieldEnum | Character_ClassScalarFieldEnum[]
  }


  /**
   * Character_Class findFirstOrThrow
   */
  export type Character_ClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Class
     */
    select?: Character_ClassSelect<ExtArgs> | null
    /**
     * Filter, which Character_Class to fetch.
     */
    where?: Character_ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Character_Classes to fetch.
     */
    orderBy?: Character_ClassOrderByWithRelationInput | Character_ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Character_Classes.
     */
    cursor?: Character_ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Character_Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Character_Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Character_Classes.
     */
    distinct?: Character_ClassScalarFieldEnum | Character_ClassScalarFieldEnum[]
  }


  /**
   * Character_Class findMany
   */
  export type Character_ClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Class
     */
    select?: Character_ClassSelect<ExtArgs> | null
    /**
     * Filter, which Character_Classes to fetch.
     */
    where?: Character_ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Character_Classes to fetch.
     */
    orderBy?: Character_ClassOrderByWithRelationInput | Character_ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Character_Classes.
     */
    cursor?: Character_ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Character_Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Character_Classes.
     */
    skip?: number
    distinct?: Character_ClassScalarFieldEnum | Character_ClassScalarFieldEnum[]
  }


  /**
   * Character_Class create
   */
  export type Character_ClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Class
     */
    select?: Character_ClassSelect<ExtArgs> | null
    /**
     * The data needed to create a Character_Class.
     */
    data: XOR<Character_ClassCreateInput, Character_ClassUncheckedCreateInput>
  }


  /**
   * Character_Class createMany
   */
  export type Character_ClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Character_Classes.
     */
    data: Character_ClassCreateManyInput | Character_ClassCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Character_Class update
   */
  export type Character_ClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Class
     */
    select?: Character_ClassSelect<ExtArgs> | null
    /**
     * The data needed to update a Character_Class.
     */
    data: XOR<Character_ClassUpdateInput, Character_ClassUncheckedUpdateInput>
    /**
     * Choose, which Character_Class to update.
     */
    where: Character_ClassWhereUniqueInput
  }


  /**
   * Character_Class updateMany
   */
  export type Character_ClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Character_Classes.
     */
    data: XOR<Character_ClassUpdateManyMutationInput, Character_ClassUncheckedUpdateManyInput>
    /**
     * Filter which Character_Classes to update
     */
    where?: Character_ClassWhereInput
  }


  /**
   * Character_Class upsert
   */
  export type Character_ClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Class
     */
    select?: Character_ClassSelect<ExtArgs> | null
    /**
     * The filter to search for the Character_Class to update in case it exists.
     */
    where: Character_ClassWhereUniqueInput
    /**
     * In case the Character_Class found by the `where` argument doesn't exist, create a new Character_Class with this data.
     */
    create: XOR<Character_ClassCreateInput, Character_ClassUncheckedCreateInput>
    /**
     * In case the Character_Class was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Character_ClassUpdateInput, Character_ClassUncheckedUpdateInput>
  }


  /**
   * Character_Class delete
   */
  export type Character_ClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Class
     */
    select?: Character_ClassSelect<ExtArgs> | null
    /**
     * Filter which Character_Class to delete.
     */
    where: Character_ClassWhereUniqueInput
  }


  /**
   * Character_Class deleteMany
   */
  export type Character_ClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Character_Classes to delete
     */
    where?: Character_ClassWhereInput
  }


  /**
   * Character_Class without action
   */
  export type Character_ClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Character_Class
     */
    select?: Character_ClassSelect<ExtArgs> | null
  }



  /**
   * Model Monster
   */

  export type AggregateMonster = {
    _count: MonsterCountAggregateOutputType | null
    _avg: MonsterAvgAggregateOutputType | null
    _sum: MonsterSumAggregateOutputType | null
    _min: MonsterMinAggregateOutputType | null
    _max: MonsterMaxAggregateOutputType | null
  }

  export type MonsterAvgAggregateOutputType = {
    id: number | null
    base_attack: number | null
    base_armor: number | null
    base_speed: number | null
    level: number | null
    xp_base_value: number | null
    maxHP: number | null
    currentHP: number | null
    loot_value: number | null
  }

  export type MonsterSumAggregateOutputType = {
    id: number | null
    base_attack: number | null
    base_armor: number | null
    base_speed: number | null
    level: number | null
    xp_base_value: number | null
    maxHP: number | null
    currentHP: number | null
    loot_value: number | null
  }

  export type MonsterMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    base_attack: number | null
    base_armor: number | null
    base_speed: number | null
    level: number | null
    attack_name: string | null
    graphicUrl: string | null
    xp_base_value: number | null
    maxHP: number | null
    currentHP: number | null
    isBoss: boolean | null
    loot_value: number | null
  }

  export type MonsterMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    base_attack: number | null
    base_armor: number | null
    base_speed: number | null
    level: number | null
    attack_name: string | null
    graphicUrl: string | null
    xp_base_value: number | null
    maxHP: number | null
    currentHP: number | null
    isBoss: boolean | null
    loot_value: number | null
  }

  export type MonsterCountAggregateOutputType = {
    id: number
    name: number
    description: number
    base_attack: number
    base_armor: number
    base_speed: number
    level: number
    attack_name: number
    graphicUrl: number
    xp_base_value: number
    maxHP: number
    currentHP: number
    isBoss: number
    loot_value: number
    _all: number
  }


  export type MonsterAvgAggregateInputType = {
    id?: true
    base_attack?: true
    base_armor?: true
    base_speed?: true
    level?: true
    xp_base_value?: true
    maxHP?: true
    currentHP?: true
    loot_value?: true
  }

  export type MonsterSumAggregateInputType = {
    id?: true
    base_attack?: true
    base_armor?: true
    base_speed?: true
    level?: true
    xp_base_value?: true
    maxHP?: true
    currentHP?: true
    loot_value?: true
  }

  export type MonsterMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    base_attack?: true
    base_armor?: true
    base_speed?: true
    level?: true
    attack_name?: true
    graphicUrl?: true
    xp_base_value?: true
    maxHP?: true
    currentHP?: true
    isBoss?: true
    loot_value?: true
  }

  export type MonsterMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    base_attack?: true
    base_armor?: true
    base_speed?: true
    level?: true
    attack_name?: true
    graphicUrl?: true
    xp_base_value?: true
    maxHP?: true
    currentHP?: true
    isBoss?: true
    loot_value?: true
  }

  export type MonsterCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    base_attack?: true
    base_armor?: true
    base_speed?: true
    level?: true
    attack_name?: true
    graphicUrl?: true
    xp_base_value?: true
    maxHP?: true
    currentHP?: true
    isBoss?: true
    loot_value?: true
    _all?: true
  }

  export type MonsterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Monster to aggregate.
     */
    where?: MonsterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Monsters to fetch.
     */
    orderBy?: MonsterOrderByWithRelationInput | MonsterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MonsterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Monsters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Monsters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Monsters
    **/
    _count?: true | MonsterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MonsterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MonsterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MonsterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MonsterMaxAggregateInputType
  }

  export type GetMonsterAggregateType<T extends MonsterAggregateArgs> = {
        [P in keyof T & keyof AggregateMonster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMonster[P]>
      : GetScalarType<T[P], AggregateMonster[P]>
  }




  export type MonsterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MonsterWhereInput
    orderBy?: MonsterOrderByWithAggregationInput | MonsterOrderByWithAggregationInput[]
    by: MonsterScalarFieldEnum[] | MonsterScalarFieldEnum
    having?: MonsterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MonsterCountAggregateInputType | true
    _avg?: MonsterAvgAggregateInputType
    _sum?: MonsterSumAggregateInputType
    _min?: MonsterMinAggregateInputType
    _max?: MonsterMaxAggregateInputType
  }

  export type MonsterGroupByOutputType = {
    id: number
    name: string
    description: string
    base_attack: number
    base_armor: number
    base_speed: number
    level: number
    attack_name: string
    graphicUrl: string
    xp_base_value: number
    maxHP: number
    currentHP: number
    isBoss: boolean
    loot_value: number
    _count: MonsterCountAggregateOutputType | null
    _avg: MonsterAvgAggregateOutputType | null
    _sum: MonsterSumAggregateOutputType | null
    _min: MonsterMinAggregateOutputType | null
    _max: MonsterMaxAggregateOutputType | null
  }

  type GetMonsterGroupByPayload<T extends MonsterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MonsterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MonsterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MonsterGroupByOutputType[P]>
            : GetScalarType<T[P], MonsterGroupByOutputType[P]>
        }
      >
    >


  export type MonsterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    base_attack?: boolean
    base_armor?: boolean
    base_speed?: boolean
    level?: boolean
    attack_name?: boolean
    graphicUrl?: boolean
    xp_base_value?: boolean
    maxHP?: boolean
    currentHP?: boolean
    isBoss?: boolean
    loot_value?: boolean
  }, ExtArgs["result"]["monster"]>

  export type MonsterSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    base_attack?: boolean
    base_armor?: boolean
    base_speed?: boolean
    level?: boolean
    attack_name?: boolean
    graphicUrl?: boolean
    xp_base_value?: boolean
    maxHP?: boolean
    currentHP?: boolean
    isBoss?: boolean
    loot_value?: boolean
  }


  export type $MonsterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Monster"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
      base_attack: number
      base_armor: number
      base_speed: number
      level: number
      attack_name: string
      graphicUrl: string
      xp_base_value: number
      maxHP: number
      currentHP: number
      isBoss: boolean
      loot_value: number
    }, ExtArgs["result"]["monster"]>
    composites: {}
  }


  type MonsterGetPayload<S extends boolean | null | undefined | MonsterDefaultArgs> = $Result.GetResult<Prisma.$MonsterPayload, S>

  type MonsterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MonsterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MonsterCountAggregateInputType | true
    }

  export interface MonsterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Monster'], meta: { name: 'Monster' } }
    /**
     * Find zero or one Monster that matches the filter.
     * @param {MonsterFindUniqueArgs} args - Arguments to find a Monster
     * @example
     * // Get one Monster
     * const monster = await prisma.monster.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MonsterFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MonsterFindUniqueArgs<ExtArgs>>
    ): Prisma__MonsterClient<$Result.GetResult<Prisma.$MonsterPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Monster that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MonsterFindUniqueOrThrowArgs} args - Arguments to find a Monster
     * @example
     * // Get one Monster
     * const monster = await prisma.monster.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MonsterFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MonsterFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MonsterClient<$Result.GetResult<Prisma.$MonsterPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Monster that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonsterFindFirstArgs} args - Arguments to find a Monster
     * @example
     * // Get one Monster
     * const monster = await prisma.monster.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MonsterFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MonsterFindFirstArgs<ExtArgs>>
    ): Prisma__MonsterClient<$Result.GetResult<Prisma.$MonsterPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Monster that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonsterFindFirstOrThrowArgs} args - Arguments to find a Monster
     * @example
     * // Get one Monster
     * const monster = await prisma.monster.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MonsterFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MonsterFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MonsterClient<$Result.GetResult<Prisma.$MonsterPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Monsters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonsterFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Monsters
     * const monsters = await prisma.monster.findMany()
     * 
     * // Get first 10 Monsters
     * const monsters = await prisma.monster.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const monsterWithIdOnly = await prisma.monster.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MonsterFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MonsterFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonsterPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Monster.
     * @param {MonsterCreateArgs} args - Arguments to create a Monster.
     * @example
     * // Create one Monster
     * const Monster = await prisma.monster.create({
     *   data: {
     *     // ... data to create a Monster
     *   }
     * })
     * 
    **/
    create<T extends MonsterCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MonsterCreateArgs<ExtArgs>>
    ): Prisma__MonsterClient<$Result.GetResult<Prisma.$MonsterPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Monsters.
     *     @param {MonsterCreateManyArgs} args - Arguments to create many Monsters.
     *     @example
     *     // Create many Monsters
     *     const monster = await prisma.monster.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MonsterCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MonsterCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Monster.
     * @param {MonsterDeleteArgs} args - Arguments to delete one Monster.
     * @example
     * // Delete one Monster
     * const Monster = await prisma.monster.delete({
     *   where: {
     *     // ... filter to delete one Monster
     *   }
     * })
     * 
    **/
    delete<T extends MonsterDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MonsterDeleteArgs<ExtArgs>>
    ): Prisma__MonsterClient<$Result.GetResult<Prisma.$MonsterPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Monster.
     * @param {MonsterUpdateArgs} args - Arguments to update one Monster.
     * @example
     * // Update one Monster
     * const monster = await prisma.monster.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MonsterUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MonsterUpdateArgs<ExtArgs>>
    ): Prisma__MonsterClient<$Result.GetResult<Prisma.$MonsterPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Monsters.
     * @param {MonsterDeleteManyArgs} args - Arguments to filter Monsters to delete.
     * @example
     * // Delete a few Monsters
     * const { count } = await prisma.monster.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MonsterDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MonsterDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Monsters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonsterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Monsters
     * const monster = await prisma.monster.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MonsterUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MonsterUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Monster.
     * @param {MonsterUpsertArgs} args - Arguments to update or create a Monster.
     * @example
     * // Update or create a Monster
     * const monster = await prisma.monster.upsert({
     *   create: {
     *     // ... data to create a Monster
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Monster we want to update
     *   }
     * })
    **/
    upsert<T extends MonsterUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MonsterUpsertArgs<ExtArgs>>
    ): Prisma__MonsterClient<$Result.GetResult<Prisma.$MonsterPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Monsters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonsterCountArgs} args - Arguments to filter Monsters to count.
     * @example
     * // Count the number of Monsters
     * const count = await prisma.monster.count({
     *   where: {
     *     // ... the filter for the Monsters we want to count
     *   }
     * })
    **/
    count<T extends MonsterCountArgs>(
      args?: Subset<T, MonsterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MonsterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Monster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonsterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MonsterAggregateArgs>(args: Subset<T, MonsterAggregateArgs>): Prisma.PrismaPromise<GetMonsterAggregateType<T>>

    /**
     * Group by Monster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonsterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MonsterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MonsterGroupByArgs['orderBy'] }
        : { orderBy?: MonsterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MonsterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMonsterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Monster model
   */
  readonly fields: MonsterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Monster.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MonsterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Monster model
   */ 
  interface MonsterFieldRefs {
    readonly id: FieldRef<"Monster", 'Int'>
    readonly name: FieldRef<"Monster", 'String'>
    readonly description: FieldRef<"Monster", 'String'>
    readonly base_attack: FieldRef<"Monster", 'Int'>
    readonly base_armor: FieldRef<"Monster", 'Int'>
    readonly base_speed: FieldRef<"Monster", 'Int'>
    readonly level: FieldRef<"Monster", 'Int'>
    readonly attack_name: FieldRef<"Monster", 'String'>
    readonly graphicUrl: FieldRef<"Monster", 'String'>
    readonly xp_base_value: FieldRef<"Monster", 'Int'>
    readonly maxHP: FieldRef<"Monster", 'Int'>
    readonly currentHP: FieldRef<"Monster", 'Int'>
    readonly isBoss: FieldRef<"Monster", 'Boolean'>
    readonly loot_value: FieldRef<"Monster", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Monster findUnique
   */
  export type MonsterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monster
     */
    select?: MonsterSelect<ExtArgs> | null
    /**
     * Filter, which Monster to fetch.
     */
    where: MonsterWhereUniqueInput
  }


  /**
   * Monster findUniqueOrThrow
   */
  export type MonsterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monster
     */
    select?: MonsterSelect<ExtArgs> | null
    /**
     * Filter, which Monster to fetch.
     */
    where: MonsterWhereUniqueInput
  }


  /**
   * Monster findFirst
   */
  export type MonsterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monster
     */
    select?: MonsterSelect<ExtArgs> | null
    /**
     * Filter, which Monster to fetch.
     */
    where?: MonsterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Monsters to fetch.
     */
    orderBy?: MonsterOrderByWithRelationInput | MonsterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Monsters.
     */
    cursor?: MonsterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Monsters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Monsters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Monsters.
     */
    distinct?: MonsterScalarFieldEnum | MonsterScalarFieldEnum[]
  }


  /**
   * Monster findFirstOrThrow
   */
  export type MonsterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monster
     */
    select?: MonsterSelect<ExtArgs> | null
    /**
     * Filter, which Monster to fetch.
     */
    where?: MonsterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Monsters to fetch.
     */
    orderBy?: MonsterOrderByWithRelationInput | MonsterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Monsters.
     */
    cursor?: MonsterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Monsters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Monsters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Monsters.
     */
    distinct?: MonsterScalarFieldEnum | MonsterScalarFieldEnum[]
  }


  /**
   * Monster findMany
   */
  export type MonsterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monster
     */
    select?: MonsterSelect<ExtArgs> | null
    /**
     * Filter, which Monsters to fetch.
     */
    where?: MonsterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Monsters to fetch.
     */
    orderBy?: MonsterOrderByWithRelationInput | MonsterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Monsters.
     */
    cursor?: MonsterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Monsters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Monsters.
     */
    skip?: number
    distinct?: MonsterScalarFieldEnum | MonsterScalarFieldEnum[]
  }


  /**
   * Monster create
   */
  export type MonsterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monster
     */
    select?: MonsterSelect<ExtArgs> | null
    /**
     * The data needed to create a Monster.
     */
    data: XOR<MonsterCreateInput, MonsterUncheckedCreateInput>
  }


  /**
   * Monster createMany
   */
  export type MonsterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Monsters.
     */
    data: MonsterCreateManyInput | MonsterCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Monster update
   */
  export type MonsterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monster
     */
    select?: MonsterSelect<ExtArgs> | null
    /**
     * The data needed to update a Monster.
     */
    data: XOR<MonsterUpdateInput, MonsterUncheckedUpdateInput>
    /**
     * Choose, which Monster to update.
     */
    where: MonsterWhereUniqueInput
  }


  /**
   * Monster updateMany
   */
  export type MonsterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Monsters.
     */
    data: XOR<MonsterUpdateManyMutationInput, MonsterUncheckedUpdateManyInput>
    /**
     * Filter which Monsters to update
     */
    where?: MonsterWhereInput
  }


  /**
   * Monster upsert
   */
  export type MonsterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monster
     */
    select?: MonsterSelect<ExtArgs> | null
    /**
     * The filter to search for the Monster to update in case it exists.
     */
    where: MonsterWhereUniqueInput
    /**
     * In case the Monster found by the `where` argument doesn't exist, create a new Monster with this data.
     */
    create: XOR<MonsterCreateInput, MonsterUncheckedCreateInput>
    /**
     * In case the Monster was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MonsterUpdateInput, MonsterUncheckedUpdateInput>
  }


  /**
   * Monster delete
   */
  export type MonsterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monster
     */
    select?: MonsterSelect<ExtArgs> | null
    /**
     * Filter which Monster to delete.
     */
    where: MonsterWhereUniqueInput
  }


  /**
   * Monster deleteMany
   */
  export type MonsterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Monsters to delete
     */
    where?: MonsterWhereInput
  }


  /**
   * Monster without action
   */
  export type MonsterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Monster
     */
    select?: MonsterSelect<ExtArgs> | null
  }



  /**
   * Model Spells
   */

  export type AggregateSpells = {
    _count: SpellsCountAggregateOutputType | null
    _avg: SpellsAvgAggregateOutputType | null
    _sum: SpellsSumAggregateOutputType | null
    _min: SpellsMinAggregateOutputType | null
    _max: SpellsMaxAggregateOutputType | null
  }

  export type SpellsAvgAggregateOutputType = {
    id: number | null
    health_bonus: number | null
    armor_bonus: number | null
    attack_bonus: number | null
    speed_bonus: number | null
    level: number | null
  }

  export type SpellsSumAggregateOutputType = {
    id: number | null
    health_bonus: number | null
    armor_bonus: number | null
    attack_bonus: number | null
    speed_bonus: number | null
    level: number | null
  }

  export type SpellsMinAggregateOutputType = {
    id: number | null
    spell_name: string | null
    description: string | null
    health_bonus: number | null
    armor_bonus: number | null
    attack_bonus: number | null
    speed_bonus: number | null
    graphicUrl: string | null
    level: number | null
  }

  export type SpellsMaxAggregateOutputType = {
    id: number | null
    spell_name: string | null
    description: string | null
    health_bonus: number | null
    armor_bonus: number | null
    attack_bonus: number | null
    speed_bonus: number | null
    graphicUrl: string | null
    level: number | null
  }

  export type SpellsCountAggregateOutputType = {
    id: number
    spell_name: number
    description: number
    health_bonus: number
    armor_bonus: number
    attack_bonus: number
    speed_bonus: number
    graphicUrl: number
    level: number
    _all: number
  }


  export type SpellsAvgAggregateInputType = {
    id?: true
    health_bonus?: true
    armor_bonus?: true
    attack_bonus?: true
    speed_bonus?: true
    level?: true
  }

  export type SpellsSumAggregateInputType = {
    id?: true
    health_bonus?: true
    armor_bonus?: true
    attack_bonus?: true
    speed_bonus?: true
    level?: true
  }

  export type SpellsMinAggregateInputType = {
    id?: true
    spell_name?: true
    description?: true
    health_bonus?: true
    armor_bonus?: true
    attack_bonus?: true
    speed_bonus?: true
    graphicUrl?: true
    level?: true
  }

  export type SpellsMaxAggregateInputType = {
    id?: true
    spell_name?: true
    description?: true
    health_bonus?: true
    armor_bonus?: true
    attack_bonus?: true
    speed_bonus?: true
    graphicUrl?: true
    level?: true
  }

  export type SpellsCountAggregateInputType = {
    id?: true
    spell_name?: true
    description?: true
    health_bonus?: true
    armor_bonus?: true
    attack_bonus?: true
    speed_bonus?: true
    graphicUrl?: true
    level?: true
    _all?: true
  }

  export type SpellsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Spells to aggregate.
     */
    where?: SpellsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spells to fetch.
     */
    orderBy?: SpellsOrderByWithRelationInput | SpellsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpellsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Spells
    **/
    _count?: true | SpellsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SpellsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SpellsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpellsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpellsMaxAggregateInputType
  }

  export type GetSpellsAggregateType<T extends SpellsAggregateArgs> = {
        [P in keyof T & keyof AggregateSpells]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpells[P]>
      : GetScalarType<T[P], AggregateSpells[P]>
  }




  export type SpellsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpellsWhereInput
    orderBy?: SpellsOrderByWithAggregationInput | SpellsOrderByWithAggregationInput[]
    by: SpellsScalarFieldEnum[] | SpellsScalarFieldEnum
    having?: SpellsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpellsCountAggregateInputType | true
    _avg?: SpellsAvgAggregateInputType
    _sum?: SpellsSumAggregateInputType
    _min?: SpellsMinAggregateInputType
    _max?: SpellsMaxAggregateInputType
  }

  export type SpellsGroupByOutputType = {
    id: number
    spell_name: string
    description: string
    health_bonus: number
    armor_bonus: number
    attack_bonus: number
    speed_bonus: number
    graphicUrl: string
    level: number
    _count: SpellsCountAggregateOutputType | null
    _avg: SpellsAvgAggregateOutputType | null
    _sum: SpellsSumAggregateOutputType | null
    _min: SpellsMinAggregateOutputType | null
    _max: SpellsMaxAggregateOutputType | null
  }

  type GetSpellsGroupByPayload<T extends SpellsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpellsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpellsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpellsGroupByOutputType[P]>
            : GetScalarType<T[P], SpellsGroupByOutputType[P]>
        }
      >
    >


  export type SpellsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    spell_name?: boolean
    description?: boolean
    health_bonus?: boolean
    armor_bonus?: boolean
    attack_bonus?: boolean
    speed_bonus?: boolean
    graphicUrl?: boolean
    level?: boolean
  }, ExtArgs["result"]["spells"]>

  export type SpellsSelectScalar = {
    id?: boolean
    spell_name?: boolean
    description?: boolean
    health_bonus?: boolean
    armor_bonus?: boolean
    attack_bonus?: boolean
    speed_bonus?: boolean
    graphicUrl?: boolean
    level?: boolean
  }


  export type $SpellsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Spells"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      spell_name: string
      description: string
      health_bonus: number
      armor_bonus: number
      attack_bonus: number
      speed_bonus: number
      graphicUrl: string
      level: number
    }, ExtArgs["result"]["spells"]>
    composites: {}
  }


  type SpellsGetPayload<S extends boolean | null | undefined | SpellsDefaultArgs> = $Result.GetResult<Prisma.$SpellsPayload, S>

  type SpellsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SpellsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SpellsCountAggregateInputType | true
    }

  export interface SpellsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Spells'], meta: { name: 'Spells' } }
    /**
     * Find zero or one Spells that matches the filter.
     * @param {SpellsFindUniqueArgs} args - Arguments to find a Spells
     * @example
     * // Get one Spells
     * const spells = await prisma.spells.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SpellsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SpellsFindUniqueArgs<ExtArgs>>
    ): Prisma__SpellsClient<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Spells that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SpellsFindUniqueOrThrowArgs} args - Arguments to find a Spells
     * @example
     * // Get one Spells
     * const spells = await prisma.spells.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SpellsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SpellsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SpellsClient<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Spells that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellsFindFirstArgs} args - Arguments to find a Spells
     * @example
     * // Get one Spells
     * const spells = await prisma.spells.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SpellsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SpellsFindFirstArgs<ExtArgs>>
    ): Prisma__SpellsClient<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Spells that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellsFindFirstOrThrowArgs} args - Arguments to find a Spells
     * @example
     * // Get one Spells
     * const spells = await prisma.spells.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SpellsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SpellsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SpellsClient<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Spells that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Spells
     * const spells = await prisma.spells.findMany()
     * 
     * // Get first 10 Spells
     * const spells = await prisma.spells.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const spellsWithIdOnly = await prisma.spells.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SpellsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SpellsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Spells.
     * @param {SpellsCreateArgs} args - Arguments to create a Spells.
     * @example
     * // Create one Spells
     * const Spells = await prisma.spells.create({
     *   data: {
     *     // ... data to create a Spells
     *   }
     * })
     * 
    **/
    create<T extends SpellsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SpellsCreateArgs<ExtArgs>>
    ): Prisma__SpellsClient<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Spells.
     *     @param {SpellsCreateManyArgs} args - Arguments to create many Spells.
     *     @example
     *     // Create many Spells
     *     const spells = await prisma.spells.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SpellsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SpellsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Spells.
     * @param {SpellsDeleteArgs} args - Arguments to delete one Spells.
     * @example
     * // Delete one Spells
     * const Spells = await prisma.spells.delete({
     *   where: {
     *     // ... filter to delete one Spells
     *   }
     * })
     * 
    **/
    delete<T extends SpellsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SpellsDeleteArgs<ExtArgs>>
    ): Prisma__SpellsClient<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Spells.
     * @param {SpellsUpdateArgs} args - Arguments to update one Spells.
     * @example
     * // Update one Spells
     * const spells = await prisma.spells.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SpellsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SpellsUpdateArgs<ExtArgs>>
    ): Prisma__SpellsClient<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Spells.
     * @param {SpellsDeleteManyArgs} args - Arguments to filter Spells to delete.
     * @example
     * // Delete a few Spells
     * const { count } = await prisma.spells.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SpellsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SpellsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Spells.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Spells
     * const spells = await prisma.spells.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SpellsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SpellsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Spells.
     * @param {SpellsUpsertArgs} args - Arguments to update or create a Spells.
     * @example
     * // Update or create a Spells
     * const spells = await prisma.spells.upsert({
     *   create: {
     *     // ... data to create a Spells
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Spells we want to update
     *   }
     * })
    **/
    upsert<T extends SpellsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SpellsUpsertArgs<ExtArgs>>
    ): Prisma__SpellsClient<$Result.GetResult<Prisma.$SpellsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Spells.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellsCountArgs} args - Arguments to filter Spells to count.
     * @example
     * // Count the number of Spells
     * const count = await prisma.spells.count({
     *   where: {
     *     // ... the filter for the Spells we want to count
     *   }
     * })
    **/
    count<T extends SpellsCountArgs>(
      args?: Subset<T, SpellsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpellsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Spells.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpellsAggregateArgs>(args: Subset<T, SpellsAggregateArgs>): Prisma.PrismaPromise<GetSpellsAggregateType<T>>

    /**
     * Group by Spells.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpellsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpellsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpellsGroupByArgs['orderBy'] }
        : { orderBy?: SpellsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpellsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpellsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Spells model
   */
  readonly fields: SpellsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Spells.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpellsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Spells model
   */ 
  interface SpellsFieldRefs {
    readonly id: FieldRef<"Spells", 'Int'>
    readonly spell_name: FieldRef<"Spells", 'String'>
    readonly description: FieldRef<"Spells", 'String'>
    readonly health_bonus: FieldRef<"Spells", 'Int'>
    readonly armor_bonus: FieldRef<"Spells", 'Int'>
    readonly attack_bonus: FieldRef<"Spells", 'Int'>
    readonly speed_bonus: FieldRef<"Spells", 'Int'>
    readonly graphicUrl: FieldRef<"Spells", 'String'>
    readonly level: FieldRef<"Spells", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Spells findUnique
   */
  export type SpellsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * Filter, which Spells to fetch.
     */
    where: SpellsWhereUniqueInput
  }


  /**
   * Spells findUniqueOrThrow
   */
  export type SpellsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * Filter, which Spells to fetch.
     */
    where: SpellsWhereUniqueInput
  }


  /**
   * Spells findFirst
   */
  export type SpellsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * Filter, which Spells to fetch.
     */
    where?: SpellsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spells to fetch.
     */
    orderBy?: SpellsOrderByWithRelationInput | SpellsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Spells.
     */
    cursor?: SpellsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Spells.
     */
    distinct?: SpellsScalarFieldEnum | SpellsScalarFieldEnum[]
  }


  /**
   * Spells findFirstOrThrow
   */
  export type SpellsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * Filter, which Spells to fetch.
     */
    where?: SpellsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spells to fetch.
     */
    orderBy?: SpellsOrderByWithRelationInput | SpellsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Spells.
     */
    cursor?: SpellsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Spells.
     */
    distinct?: SpellsScalarFieldEnum | SpellsScalarFieldEnum[]
  }


  /**
   * Spells findMany
   */
  export type SpellsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * Filter, which Spells to fetch.
     */
    where?: SpellsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Spells to fetch.
     */
    orderBy?: SpellsOrderByWithRelationInput | SpellsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Spells.
     */
    cursor?: SpellsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Spells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Spells.
     */
    skip?: number
    distinct?: SpellsScalarFieldEnum | SpellsScalarFieldEnum[]
  }


  /**
   * Spells create
   */
  export type SpellsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * The data needed to create a Spells.
     */
    data: XOR<SpellsCreateInput, SpellsUncheckedCreateInput>
  }


  /**
   * Spells createMany
   */
  export type SpellsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Spells.
     */
    data: SpellsCreateManyInput | SpellsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Spells update
   */
  export type SpellsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * The data needed to update a Spells.
     */
    data: XOR<SpellsUpdateInput, SpellsUncheckedUpdateInput>
    /**
     * Choose, which Spells to update.
     */
    where: SpellsWhereUniqueInput
  }


  /**
   * Spells updateMany
   */
  export type SpellsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Spells.
     */
    data: XOR<SpellsUpdateManyMutationInput, SpellsUncheckedUpdateManyInput>
    /**
     * Filter which Spells to update
     */
    where?: SpellsWhereInput
  }


  /**
   * Spells upsert
   */
  export type SpellsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * The filter to search for the Spells to update in case it exists.
     */
    where: SpellsWhereUniqueInput
    /**
     * In case the Spells found by the `where` argument doesn't exist, create a new Spells with this data.
     */
    create: XOR<SpellsCreateInput, SpellsUncheckedCreateInput>
    /**
     * In case the Spells was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpellsUpdateInput, SpellsUncheckedUpdateInput>
  }


  /**
   * Spells delete
   */
  export type SpellsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
    /**
     * Filter which Spells to delete.
     */
    where: SpellsWhereUniqueInput
  }


  /**
   * Spells deleteMany
   */
  export type SpellsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Spells to delete
     */
    where?: SpellsWhereInput
  }


  /**
   * Spells without action
   */
  export type SpellsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Spells
     */
    select?: SpellsSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    isAdmin: 'isAdmin',
    isBanned: 'isBanned',
    createdAt: 'createdAt',
    character_id: 'character_id',
    phone: 'phone',
    email: 'email'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CharacterScalarFieldEnum: {
    id: 'id',
    name: 'name',
    gender: 'gender',
    character_class: 'character_class',
    currentHP: 'currentHP',
    maxHP: 'maxHP',
    xp: 'xp',
    level: 'level',
    graphicUrl: 'graphicUrl',
    gold: 'gold',
    head_gear1: 'head_gear1',
    left_hand_gear2: 'left_hand_gear2',
    right_hand_gear3: 'right_hand_gear3',
    foot_gear4: 'foot_gear4',
    chest_gear5: 'chest_gear5',
    backpack1: 'backpack1',
    backpack2: 'backpack2',
    backpack3: 'backpack3',
    backpack4: 'backpack4',
    backpack5: 'backpack5',
    backpack6: 'backpack6',
    backpack7: 'backpack7',
    backpack8: 'backpack8',
    base_attack: 'base_attack',
    base_armor: 'base_armor',
    base_speed: 'base_speed',
    magic_points: 'magic_points',
    current_mp: 'current_mp',
    isNPC: 'isNPC',
    location_coordinates: 'location_coordinates',
    stagescompleted: 'stagescompleted'
  };

  export type CharacterScalarFieldEnum = (typeof CharacterScalarFieldEnum)[keyof typeof CharacterScalarFieldEnum]


  export const Character_GearScalarFieldEnum: {
    id: 'id',
    character_id: 'character_id',
    gear_id: 'gear_id'
  };

  export type Character_GearScalarFieldEnum = (typeof Character_GearScalarFieldEnum)[keyof typeof Character_GearScalarFieldEnum]


  export const GearScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    attack: 'attack',
    armor: 'armor',
    isTwoHanded: 'isTwoHanded',
    equip_location: 'equip_location',
    preferred_class: 'preferred_class',
    health_bonus: 'health_bonus',
    armor_bonus: 'armor_bonus',
    attack_bonus: 'attack_bonus',
    speed_bonus: 'speed_bonus',
    graphicUrl: 'graphicUrl',
    price: 'price'
  };

  export type GearScalarFieldEnum = (typeof GearScalarFieldEnum)[keyof typeof GearScalarFieldEnum]


  export const Character_ClassScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    beginning_attack: 'beginning_attack',
    beginning_armor: 'beginning_armor',
    beginning_speed: 'beginning_speed',
    beginning_hp: 'beginning_hp',
    graphicUrl: 'graphicUrl'
  };

  export type Character_ClassScalarFieldEnum = (typeof Character_ClassScalarFieldEnum)[keyof typeof Character_ClassScalarFieldEnum]


  export const MonsterScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    base_attack: 'base_attack',
    base_armor: 'base_armor',
    base_speed: 'base_speed',
    level: 'level',
    attack_name: 'attack_name',
    graphicUrl: 'graphicUrl',
    xp_base_value: 'xp_base_value',
    maxHP: 'maxHP',
    currentHP: 'currentHP',
    isBoss: 'isBoss',
    loot_value: 'loot_value'
  };

  export type MonsterScalarFieldEnum = (typeof MonsterScalarFieldEnum)[keyof typeof MonsterScalarFieldEnum]


  export const SpellsScalarFieldEnum: {
    id: 'id',
    spell_name: 'spell_name',
    description: 'description',
    health_bonus: 'health_bonus',
    armor_bonus: 'armor_bonus',
    attack_bonus: 'attack_bonus',
    speed_bonus: 'speed_bonus',
    graphicUrl: 'graphicUrl',
    level: 'level'
  };

  export type SpellsScalarFieldEnum = (typeof SpellsScalarFieldEnum)[keyof typeof SpellsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    isAdmin?: BoolFilter<"User"> | boolean
    isBanned?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    character_id?: IntNullableFilter<"User"> | number | null
    phone?: IntNullableFilter<"User"> | number | null
    email?: StringNullableFilter<"User"> | string | null
    character?: XOR<CharacterNullableRelationFilter, CharacterWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
    isBanned?: SortOrder
    createdAt?: SortOrder
    character_id?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    character?: CharacterOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    character_id?: number
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    isAdmin?: BoolFilter<"User"> | boolean
    isBanned?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    phone?: IntNullableFilter<"User"> | number | null
    email?: StringNullableFilter<"User"> | string | null
    character?: XOR<CharacterNullableRelationFilter, CharacterWhereInput> | null
  }, "id" | "username" | "character_id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
    isBanned?: SortOrder
    createdAt?: SortOrder
    character_id?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    isAdmin?: BoolWithAggregatesFilter<"User"> | boolean
    isBanned?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    character_id?: IntNullableWithAggregatesFilter<"User"> | number | null
    phone?: IntNullableWithAggregatesFilter<"User"> | number | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type CharacterWhereInput = {
    AND?: CharacterWhereInput | CharacterWhereInput[]
    OR?: CharacterWhereInput[]
    NOT?: CharacterWhereInput | CharacterWhereInput[]
    id?: IntFilter<"Character"> | number
    name?: StringFilter<"Character"> | string
    gender?: StringFilter<"Character"> | string
    character_class?: StringFilter<"Character"> | string
    currentHP?: IntFilter<"Character"> | number
    maxHP?: IntFilter<"Character"> | number
    xp?: IntFilter<"Character"> | number
    level?: IntFilter<"Character"> | number
    graphicUrl?: StringFilter<"Character"> | string
    gold?: IntFilter<"Character"> | number
    head_gear1?: IntNullableFilter<"Character"> | number | null
    left_hand_gear2?: IntNullableFilter<"Character"> | number | null
    right_hand_gear3?: IntNullableFilter<"Character"> | number | null
    foot_gear4?: IntNullableFilter<"Character"> | number | null
    chest_gear5?: IntNullableFilter<"Character"> | number | null
    backpack1?: IntFilter<"Character"> | number
    backpack2?: IntFilter<"Character"> | number
    backpack3?: IntFilter<"Character"> | number
    backpack4?: IntFilter<"Character"> | number
    backpack5?: IntFilter<"Character"> | number
    backpack6?: IntFilter<"Character"> | number
    backpack7?: IntFilter<"Character"> | number
    backpack8?: IntFilter<"Character"> | number
    base_attack?: IntFilter<"Character"> | number
    base_armor?: IntFilter<"Character"> | number
    base_speed?: IntFilter<"Character"> | number
    magic_points?: IntNullableFilter<"Character"> | number | null
    current_mp?: IntNullableFilter<"Character"> | number | null
    isNPC?: BoolFilter<"Character"> | boolean
    location_coordinates?: StringNullableFilter<"Character"> | string | null
    stagescompleted?: IntFilter<"Character"> | number
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    inventory?: Character_GearListRelationFilter
  }

  export type CharacterOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    character_class?: SortOrder
    currentHP?: SortOrder
    maxHP?: SortOrder
    xp?: SortOrder
    level?: SortOrder
    graphicUrl?: SortOrder
    gold?: SortOrder
    head_gear1?: SortOrderInput | SortOrder
    left_hand_gear2?: SortOrderInput | SortOrder
    right_hand_gear3?: SortOrderInput | SortOrder
    foot_gear4?: SortOrderInput | SortOrder
    chest_gear5?: SortOrderInput | SortOrder
    backpack1?: SortOrder
    backpack2?: SortOrder
    backpack3?: SortOrder
    backpack4?: SortOrder
    backpack5?: SortOrder
    backpack6?: SortOrder
    backpack7?: SortOrder
    backpack8?: SortOrder
    base_attack?: SortOrder
    base_armor?: SortOrder
    base_speed?: SortOrder
    magic_points?: SortOrderInput | SortOrder
    current_mp?: SortOrderInput | SortOrder
    isNPC?: SortOrder
    location_coordinates?: SortOrderInput | SortOrder
    stagescompleted?: SortOrder
    user?: UserOrderByWithRelationInput
    inventory?: Character_GearOrderByRelationAggregateInput
  }

  export type CharacterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CharacterWhereInput | CharacterWhereInput[]
    OR?: CharacterWhereInput[]
    NOT?: CharacterWhereInput | CharacterWhereInput[]
    name?: StringFilter<"Character"> | string
    gender?: StringFilter<"Character"> | string
    character_class?: StringFilter<"Character"> | string
    currentHP?: IntFilter<"Character"> | number
    maxHP?: IntFilter<"Character"> | number
    xp?: IntFilter<"Character"> | number
    level?: IntFilter<"Character"> | number
    graphicUrl?: StringFilter<"Character"> | string
    gold?: IntFilter<"Character"> | number
    head_gear1?: IntNullableFilter<"Character"> | number | null
    left_hand_gear2?: IntNullableFilter<"Character"> | number | null
    right_hand_gear3?: IntNullableFilter<"Character"> | number | null
    foot_gear4?: IntNullableFilter<"Character"> | number | null
    chest_gear5?: IntNullableFilter<"Character"> | number | null
    backpack1?: IntFilter<"Character"> | number
    backpack2?: IntFilter<"Character"> | number
    backpack3?: IntFilter<"Character"> | number
    backpack4?: IntFilter<"Character"> | number
    backpack5?: IntFilter<"Character"> | number
    backpack6?: IntFilter<"Character"> | number
    backpack7?: IntFilter<"Character"> | number
    backpack8?: IntFilter<"Character"> | number
    base_attack?: IntFilter<"Character"> | number
    base_armor?: IntFilter<"Character"> | number
    base_speed?: IntFilter<"Character"> | number
    magic_points?: IntNullableFilter<"Character"> | number | null
    current_mp?: IntNullableFilter<"Character"> | number | null
    isNPC?: BoolFilter<"Character"> | boolean
    location_coordinates?: StringNullableFilter<"Character"> | string | null
    stagescompleted?: IntFilter<"Character"> | number
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    inventory?: Character_GearListRelationFilter
  }, "id">

  export type CharacterOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    character_class?: SortOrder
    currentHP?: SortOrder
    maxHP?: SortOrder
    xp?: SortOrder
    level?: SortOrder
    graphicUrl?: SortOrder
    gold?: SortOrder
    head_gear1?: SortOrderInput | SortOrder
    left_hand_gear2?: SortOrderInput | SortOrder
    right_hand_gear3?: SortOrderInput | SortOrder
    foot_gear4?: SortOrderInput | SortOrder
    chest_gear5?: SortOrderInput | SortOrder
    backpack1?: SortOrder
    backpack2?: SortOrder
    backpack3?: SortOrder
    backpack4?: SortOrder
    backpack5?: SortOrder
    backpack6?: SortOrder
    backpack7?: SortOrder
    backpack8?: SortOrder
    base_attack?: SortOrder
    base_armor?: SortOrder
    base_speed?: SortOrder
    magic_points?: SortOrderInput | SortOrder
    current_mp?: SortOrderInput | SortOrder
    isNPC?: SortOrder
    location_coordinates?: SortOrderInput | SortOrder
    stagescompleted?: SortOrder
    _count?: CharacterCountOrderByAggregateInput
    _avg?: CharacterAvgOrderByAggregateInput
    _max?: CharacterMaxOrderByAggregateInput
    _min?: CharacterMinOrderByAggregateInput
    _sum?: CharacterSumOrderByAggregateInput
  }

  export type CharacterScalarWhereWithAggregatesInput = {
    AND?: CharacterScalarWhereWithAggregatesInput | CharacterScalarWhereWithAggregatesInput[]
    OR?: CharacterScalarWhereWithAggregatesInput[]
    NOT?: CharacterScalarWhereWithAggregatesInput | CharacterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Character"> | number
    name?: StringWithAggregatesFilter<"Character"> | string
    gender?: StringWithAggregatesFilter<"Character"> | string
    character_class?: StringWithAggregatesFilter<"Character"> | string
    currentHP?: IntWithAggregatesFilter<"Character"> | number
    maxHP?: IntWithAggregatesFilter<"Character"> | number
    xp?: IntWithAggregatesFilter<"Character"> | number
    level?: IntWithAggregatesFilter<"Character"> | number
    graphicUrl?: StringWithAggregatesFilter<"Character"> | string
    gold?: IntWithAggregatesFilter<"Character"> | number
    head_gear1?: IntNullableWithAggregatesFilter<"Character"> | number | null
    left_hand_gear2?: IntNullableWithAggregatesFilter<"Character"> | number | null
    right_hand_gear3?: IntNullableWithAggregatesFilter<"Character"> | number | null
    foot_gear4?: IntNullableWithAggregatesFilter<"Character"> | number | null
    chest_gear5?: IntNullableWithAggregatesFilter<"Character"> | number | null
    backpack1?: IntWithAggregatesFilter<"Character"> | number
    backpack2?: IntWithAggregatesFilter<"Character"> | number
    backpack3?: IntWithAggregatesFilter<"Character"> | number
    backpack4?: IntWithAggregatesFilter<"Character"> | number
    backpack5?: IntWithAggregatesFilter<"Character"> | number
    backpack6?: IntWithAggregatesFilter<"Character"> | number
    backpack7?: IntWithAggregatesFilter<"Character"> | number
    backpack8?: IntWithAggregatesFilter<"Character"> | number
    base_attack?: IntWithAggregatesFilter<"Character"> | number
    base_armor?: IntWithAggregatesFilter<"Character"> | number
    base_speed?: IntWithAggregatesFilter<"Character"> | number
    magic_points?: IntNullableWithAggregatesFilter<"Character"> | number | null
    current_mp?: IntNullableWithAggregatesFilter<"Character"> | number | null
    isNPC?: BoolWithAggregatesFilter<"Character"> | boolean
    location_coordinates?: StringNullableWithAggregatesFilter<"Character"> | string | null
    stagescompleted?: IntWithAggregatesFilter<"Character"> | number
  }

  export type Character_GearWhereInput = {
    AND?: Character_GearWhereInput | Character_GearWhereInput[]
    OR?: Character_GearWhereInput[]
    NOT?: Character_GearWhereInput | Character_GearWhereInput[]
    id?: IntFilter<"Character_Gear"> | number
    character_id?: IntFilter<"Character_Gear"> | number
    gear_id?: IntFilter<"Character_Gear"> | number
    Character?: XOR<CharacterRelationFilter, CharacterWhereInput>
    gear?: XOR<GearRelationFilter, GearWhereInput>
  }

  export type Character_GearOrderByWithRelationInput = {
    id?: SortOrder
    character_id?: SortOrder
    gear_id?: SortOrder
    Character?: CharacterOrderByWithRelationInput
    gear?: GearOrderByWithRelationInput
  }

  export type Character_GearWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Character_GearWhereInput | Character_GearWhereInput[]
    OR?: Character_GearWhereInput[]
    NOT?: Character_GearWhereInput | Character_GearWhereInput[]
    character_id?: IntFilter<"Character_Gear"> | number
    gear_id?: IntFilter<"Character_Gear"> | number
    Character?: XOR<CharacterRelationFilter, CharacterWhereInput>
    gear?: XOR<GearRelationFilter, GearWhereInput>
  }, "id">

  export type Character_GearOrderByWithAggregationInput = {
    id?: SortOrder
    character_id?: SortOrder
    gear_id?: SortOrder
    _count?: Character_GearCountOrderByAggregateInput
    _avg?: Character_GearAvgOrderByAggregateInput
    _max?: Character_GearMaxOrderByAggregateInput
    _min?: Character_GearMinOrderByAggregateInput
    _sum?: Character_GearSumOrderByAggregateInput
  }

  export type Character_GearScalarWhereWithAggregatesInput = {
    AND?: Character_GearScalarWhereWithAggregatesInput | Character_GearScalarWhereWithAggregatesInput[]
    OR?: Character_GearScalarWhereWithAggregatesInput[]
    NOT?: Character_GearScalarWhereWithAggregatesInput | Character_GearScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Character_Gear"> | number
    character_id?: IntWithAggregatesFilter<"Character_Gear"> | number
    gear_id?: IntWithAggregatesFilter<"Character_Gear"> | number
  }

  export type GearWhereInput = {
    AND?: GearWhereInput | GearWhereInput[]
    OR?: GearWhereInput[]
    NOT?: GearWhereInput | GearWhereInput[]
    id?: IntFilter<"Gear"> | number
    name?: StringFilter<"Gear"> | string
    description?: StringFilter<"Gear"> | string
    attack?: IntFilter<"Gear"> | number
    armor?: IntFilter<"Gear"> | number
    isTwoHanded?: BoolFilter<"Gear"> | boolean
    equip_location?: IntFilter<"Gear"> | number
    preferred_class?: StringFilter<"Gear"> | string
    health_bonus?: IntFilter<"Gear"> | number
    armor_bonus?: IntFilter<"Gear"> | number
    attack_bonus?: IntFilter<"Gear"> | number
    speed_bonus?: IntFilter<"Gear"> | number
    graphicUrl?: StringFilter<"Gear"> | string
    price?: IntFilter<"Gear"> | number
    Character_Gear?: Character_GearListRelationFilter
  }

  export type GearOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    attack?: SortOrder
    armor?: SortOrder
    isTwoHanded?: SortOrder
    equip_location?: SortOrder
    preferred_class?: SortOrder
    health_bonus?: SortOrder
    armor_bonus?: SortOrder
    attack_bonus?: SortOrder
    speed_bonus?: SortOrder
    graphicUrl?: SortOrder
    price?: SortOrder
    Character_Gear?: Character_GearOrderByRelationAggregateInput
  }

  export type GearWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GearWhereInput | GearWhereInput[]
    OR?: GearWhereInput[]
    NOT?: GearWhereInput | GearWhereInput[]
    name?: StringFilter<"Gear"> | string
    description?: StringFilter<"Gear"> | string
    attack?: IntFilter<"Gear"> | number
    armor?: IntFilter<"Gear"> | number
    isTwoHanded?: BoolFilter<"Gear"> | boolean
    equip_location?: IntFilter<"Gear"> | number
    preferred_class?: StringFilter<"Gear"> | string
    health_bonus?: IntFilter<"Gear"> | number
    armor_bonus?: IntFilter<"Gear"> | number
    attack_bonus?: IntFilter<"Gear"> | number
    speed_bonus?: IntFilter<"Gear"> | number
    graphicUrl?: StringFilter<"Gear"> | string
    price?: IntFilter<"Gear"> | number
    Character_Gear?: Character_GearListRelationFilter
  }, "id">

  export type GearOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    attack?: SortOrder
    armor?: SortOrder
    isTwoHanded?: SortOrder
    equip_location?: SortOrder
    preferred_class?: SortOrder
    health_bonus?: SortOrder
    armor_bonus?: SortOrder
    attack_bonus?: SortOrder
    speed_bonus?: SortOrder
    graphicUrl?: SortOrder
    price?: SortOrder
    _count?: GearCountOrderByAggregateInput
    _avg?: GearAvgOrderByAggregateInput
    _max?: GearMaxOrderByAggregateInput
    _min?: GearMinOrderByAggregateInput
    _sum?: GearSumOrderByAggregateInput
  }

  export type GearScalarWhereWithAggregatesInput = {
    AND?: GearScalarWhereWithAggregatesInput | GearScalarWhereWithAggregatesInput[]
    OR?: GearScalarWhereWithAggregatesInput[]
    NOT?: GearScalarWhereWithAggregatesInput | GearScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Gear"> | number
    name?: StringWithAggregatesFilter<"Gear"> | string
    description?: StringWithAggregatesFilter<"Gear"> | string
    attack?: IntWithAggregatesFilter<"Gear"> | number
    armor?: IntWithAggregatesFilter<"Gear"> | number
    isTwoHanded?: BoolWithAggregatesFilter<"Gear"> | boolean
    equip_location?: IntWithAggregatesFilter<"Gear"> | number
    preferred_class?: StringWithAggregatesFilter<"Gear"> | string
    health_bonus?: IntWithAggregatesFilter<"Gear"> | number
    armor_bonus?: IntWithAggregatesFilter<"Gear"> | number
    attack_bonus?: IntWithAggregatesFilter<"Gear"> | number
    speed_bonus?: IntWithAggregatesFilter<"Gear"> | number
    graphicUrl?: StringWithAggregatesFilter<"Gear"> | string
    price?: IntWithAggregatesFilter<"Gear"> | number
  }

  export type Character_ClassWhereInput = {
    AND?: Character_ClassWhereInput | Character_ClassWhereInput[]
    OR?: Character_ClassWhereInput[]
    NOT?: Character_ClassWhereInput | Character_ClassWhereInput[]
    id?: IntFilter<"Character_Class"> | number
    name?: StringFilter<"Character_Class"> | string
    description?: StringFilter<"Character_Class"> | string
    beginning_attack?: IntFilter<"Character_Class"> | number
    beginning_armor?: IntFilter<"Character_Class"> | number
    beginning_speed?: IntFilter<"Character_Class"> | number
    beginning_hp?: IntFilter<"Character_Class"> | number
    graphicUrl?: StringFilter<"Character_Class"> | string
  }

  export type Character_ClassOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    beginning_attack?: SortOrder
    beginning_armor?: SortOrder
    beginning_speed?: SortOrder
    beginning_hp?: SortOrder
    graphicUrl?: SortOrder
  }

  export type Character_ClassWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Character_ClassWhereInput | Character_ClassWhereInput[]
    OR?: Character_ClassWhereInput[]
    NOT?: Character_ClassWhereInput | Character_ClassWhereInput[]
    name?: StringFilter<"Character_Class"> | string
    description?: StringFilter<"Character_Class"> | string
    beginning_attack?: IntFilter<"Character_Class"> | number
    beginning_armor?: IntFilter<"Character_Class"> | number
    beginning_speed?: IntFilter<"Character_Class"> | number
    beginning_hp?: IntFilter<"Character_Class"> | number
    graphicUrl?: StringFilter<"Character_Class"> | string
  }, "id">

  export type Character_ClassOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    beginning_attack?: SortOrder
    beginning_armor?: SortOrder
    beginning_speed?: SortOrder
    beginning_hp?: SortOrder
    graphicUrl?: SortOrder
    _count?: Character_ClassCountOrderByAggregateInput
    _avg?: Character_ClassAvgOrderByAggregateInput
    _max?: Character_ClassMaxOrderByAggregateInput
    _min?: Character_ClassMinOrderByAggregateInput
    _sum?: Character_ClassSumOrderByAggregateInput
  }

  export type Character_ClassScalarWhereWithAggregatesInput = {
    AND?: Character_ClassScalarWhereWithAggregatesInput | Character_ClassScalarWhereWithAggregatesInput[]
    OR?: Character_ClassScalarWhereWithAggregatesInput[]
    NOT?: Character_ClassScalarWhereWithAggregatesInput | Character_ClassScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Character_Class"> | number
    name?: StringWithAggregatesFilter<"Character_Class"> | string
    description?: StringWithAggregatesFilter<"Character_Class"> | string
    beginning_attack?: IntWithAggregatesFilter<"Character_Class"> | number
    beginning_armor?: IntWithAggregatesFilter<"Character_Class"> | number
    beginning_speed?: IntWithAggregatesFilter<"Character_Class"> | number
    beginning_hp?: IntWithAggregatesFilter<"Character_Class"> | number
    graphicUrl?: StringWithAggregatesFilter<"Character_Class"> | string
  }

  export type MonsterWhereInput = {
    AND?: MonsterWhereInput | MonsterWhereInput[]
    OR?: MonsterWhereInput[]
    NOT?: MonsterWhereInput | MonsterWhereInput[]
    id?: IntFilter<"Monster"> | number
    name?: StringFilter<"Monster"> | string
    description?: StringFilter<"Monster"> | string
    base_attack?: IntFilter<"Monster"> | number
    base_armor?: IntFilter<"Monster"> | number
    base_speed?: IntFilter<"Monster"> | number
    level?: IntFilter<"Monster"> | number
    attack_name?: StringFilter<"Monster"> | string
    graphicUrl?: StringFilter<"Monster"> | string
    xp_base_value?: IntFilter<"Monster"> | number
    maxHP?: IntFilter<"Monster"> | number
    currentHP?: IntFilter<"Monster"> | number
    isBoss?: BoolFilter<"Monster"> | boolean
    loot_value?: IntFilter<"Monster"> | number
  }

  export type MonsterOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    base_attack?: SortOrder
    base_armor?: SortOrder
    base_speed?: SortOrder
    level?: SortOrder
    attack_name?: SortOrder
    graphicUrl?: SortOrder
    xp_base_value?: SortOrder
    maxHP?: SortOrder
    currentHP?: SortOrder
    isBoss?: SortOrder
    loot_value?: SortOrder
  }

  export type MonsterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MonsterWhereInput | MonsterWhereInput[]
    OR?: MonsterWhereInput[]
    NOT?: MonsterWhereInput | MonsterWhereInput[]
    name?: StringFilter<"Monster"> | string
    description?: StringFilter<"Monster"> | string
    base_attack?: IntFilter<"Monster"> | number
    base_armor?: IntFilter<"Monster"> | number
    base_speed?: IntFilter<"Monster"> | number
    level?: IntFilter<"Monster"> | number
    attack_name?: StringFilter<"Monster"> | string
    graphicUrl?: StringFilter<"Monster"> | string
    xp_base_value?: IntFilter<"Monster"> | number
    maxHP?: IntFilter<"Monster"> | number
    currentHP?: IntFilter<"Monster"> | number
    isBoss?: BoolFilter<"Monster"> | boolean
    loot_value?: IntFilter<"Monster"> | number
  }, "id">

  export type MonsterOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    base_attack?: SortOrder
    base_armor?: SortOrder
    base_speed?: SortOrder
    level?: SortOrder
    attack_name?: SortOrder
    graphicUrl?: SortOrder
    xp_base_value?: SortOrder
    maxHP?: SortOrder
    currentHP?: SortOrder
    isBoss?: SortOrder
    loot_value?: SortOrder
    _count?: MonsterCountOrderByAggregateInput
    _avg?: MonsterAvgOrderByAggregateInput
    _max?: MonsterMaxOrderByAggregateInput
    _min?: MonsterMinOrderByAggregateInput
    _sum?: MonsterSumOrderByAggregateInput
  }

  export type MonsterScalarWhereWithAggregatesInput = {
    AND?: MonsterScalarWhereWithAggregatesInput | MonsterScalarWhereWithAggregatesInput[]
    OR?: MonsterScalarWhereWithAggregatesInput[]
    NOT?: MonsterScalarWhereWithAggregatesInput | MonsterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Monster"> | number
    name?: StringWithAggregatesFilter<"Monster"> | string
    description?: StringWithAggregatesFilter<"Monster"> | string
    base_attack?: IntWithAggregatesFilter<"Monster"> | number
    base_armor?: IntWithAggregatesFilter<"Monster"> | number
    base_speed?: IntWithAggregatesFilter<"Monster"> | number
    level?: IntWithAggregatesFilter<"Monster"> | number
    attack_name?: StringWithAggregatesFilter<"Monster"> | string
    graphicUrl?: StringWithAggregatesFilter<"Monster"> | string
    xp_base_value?: IntWithAggregatesFilter<"Monster"> | number
    maxHP?: IntWithAggregatesFilter<"Monster"> | number
    currentHP?: IntWithAggregatesFilter<"Monster"> | number
    isBoss?: BoolWithAggregatesFilter<"Monster"> | boolean
    loot_value?: IntWithAggregatesFilter<"Monster"> | number
  }

  export type SpellsWhereInput = {
    AND?: SpellsWhereInput | SpellsWhereInput[]
    OR?: SpellsWhereInput[]
    NOT?: SpellsWhereInput | SpellsWhereInput[]
    id?: IntFilter<"Spells"> | number
    spell_name?: StringFilter<"Spells"> | string
    description?: StringFilter<"Spells"> | string
    health_bonus?: IntFilter<"Spells"> | number
    armor_bonus?: IntFilter<"Spells"> | number
    attack_bonus?: IntFilter<"Spells"> | number
    speed_bonus?: IntFilter<"Spells"> | number
    graphicUrl?: StringFilter<"Spells"> | string
    level?: IntFilter<"Spells"> | number
  }

  export type SpellsOrderByWithRelationInput = {
    id?: SortOrder
    spell_name?: SortOrder
    description?: SortOrder
    health_bonus?: SortOrder
    armor_bonus?: SortOrder
    attack_bonus?: SortOrder
    speed_bonus?: SortOrder
    graphicUrl?: SortOrder
    level?: SortOrder
  }

  export type SpellsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SpellsWhereInput | SpellsWhereInput[]
    OR?: SpellsWhereInput[]
    NOT?: SpellsWhereInput | SpellsWhereInput[]
    spell_name?: StringFilter<"Spells"> | string
    description?: StringFilter<"Spells"> | string
    health_bonus?: IntFilter<"Spells"> | number
    armor_bonus?: IntFilter<"Spells"> | number
    attack_bonus?: IntFilter<"Spells"> | number
    speed_bonus?: IntFilter<"Spells"> | number
    graphicUrl?: StringFilter<"Spells"> | string
    level?: IntFilter<"Spells"> | number
  }, "id">

  export type SpellsOrderByWithAggregationInput = {
    id?: SortOrder
    spell_name?: SortOrder
    description?: SortOrder
    health_bonus?: SortOrder
    armor_bonus?: SortOrder
    attack_bonus?: SortOrder
    speed_bonus?: SortOrder
    graphicUrl?: SortOrder
    level?: SortOrder
    _count?: SpellsCountOrderByAggregateInput
    _avg?: SpellsAvgOrderByAggregateInput
    _max?: SpellsMaxOrderByAggregateInput
    _min?: SpellsMinOrderByAggregateInput
    _sum?: SpellsSumOrderByAggregateInput
  }

  export type SpellsScalarWhereWithAggregatesInput = {
    AND?: SpellsScalarWhereWithAggregatesInput | SpellsScalarWhereWithAggregatesInput[]
    OR?: SpellsScalarWhereWithAggregatesInput[]
    NOT?: SpellsScalarWhereWithAggregatesInput | SpellsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Spells"> | number
    spell_name?: StringWithAggregatesFilter<"Spells"> | string
    description?: StringWithAggregatesFilter<"Spells"> | string
    health_bonus?: IntWithAggregatesFilter<"Spells"> | number
    armor_bonus?: IntWithAggregatesFilter<"Spells"> | number
    attack_bonus?: IntWithAggregatesFilter<"Spells"> | number
    speed_bonus?: IntWithAggregatesFilter<"Spells"> | number
    graphicUrl?: StringWithAggregatesFilter<"Spells"> | string
    level?: IntWithAggregatesFilter<"Spells"> | number
  }

  export type UserCreateInput = {
    username: string
    password: string
    isAdmin?: boolean
    isBanned?: boolean
    createdAt?: Date | string
    phone?: number | null
    email?: string | null
    character?: CharacterCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    isAdmin?: boolean
    isBanned?: boolean
    createdAt?: Date | string
    character_id?: number | null
    phone?: number | null
    email?: string | null
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    character?: CharacterUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character_id?: NullableIntFieldUpdateOperationsInput | number | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    password: string
    isAdmin?: boolean
    isBanned?: boolean
    createdAt?: Date | string
    character_id?: number | null
    phone?: number | null
    email?: string | null
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    character_id?: NullableIntFieldUpdateOperationsInput | number | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CharacterCreateInput = {
    name: string
    gender: string
    character_class: string
    currentHP: number
    maxHP: number
    xp: number
    level: number
    graphicUrl: string
    gold: number
    head_gear1?: number | null
    left_hand_gear2?: number | null
    right_hand_gear3?: number | null
    foot_gear4?: number | null
    chest_gear5?: number | null
    backpack1?: number
    backpack2?: number
    backpack3?: number
    backpack4?: number
    backpack5?: number
    backpack6?: number
    backpack7?: number
    backpack8?: number
    base_attack: number
    base_armor: number
    base_speed: number
    magic_points?: number | null
    current_mp?: number | null
    isNPC?: boolean
    location_coordinates?: string | null
    stagescompleted?: number
    user?: UserCreateNestedOneWithoutCharacterInput
    inventory?: Character_GearCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateInput = {
    id?: number
    name: string
    gender: string
    character_class: string
    currentHP: number
    maxHP: number
    xp: number
    level: number
    graphicUrl: string
    gold: number
    head_gear1?: number | null
    left_hand_gear2?: number | null
    right_hand_gear3?: number | null
    foot_gear4?: number | null
    chest_gear5?: number | null
    backpack1?: number
    backpack2?: number
    backpack3?: number
    backpack4?: number
    backpack5?: number
    backpack6?: number
    backpack7?: number
    backpack8?: number
    base_attack: number
    base_armor: number
    base_speed: number
    magic_points?: number | null
    current_mp?: number | null
    isNPC?: boolean
    location_coordinates?: string | null
    stagescompleted?: number
    user?: UserUncheckedCreateNestedOneWithoutCharacterInput
    inventory?: Character_GearUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    character_class?: StringFieldUpdateOperationsInput | string
    currentHP?: IntFieldUpdateOperationsInput | number
    maxHP?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
    gold?: IntFieldUpdateOperationsInput | number
    head_gear1?: NullableIntFieldUpdateOperationsInput | number | null
    left_hand_gear2?: NullableIntFieldUpdateOperationsInput | number | null
    right_hand_gear3?: NullableIntFieldUpdateOperationsInput | number | null
    foot_gear4?: NullableIntFieldUpdateOperationsInput | number | null
    chest_gear5?: NullableIntFieldUpdateOperationsInput | number | null
    backpack1?: IntFieldUpdateOperationsInput | number
    backpack2?: IntFieldUpdateOperationsInput | number
    backpack3?: IntFieldUpdateOperationsInput | number
    backpack4?: IntFieldUpdateOperationsInput | number
    backpack5?: IntFieldUpdateOperationsInput | number
    backpack6?: IntFieldUpdateOperationsInput | number
    backpack7?: IntFieldUpdateOperationsInput | number
    backpack8?: IntFieldUpdateOperationsInput | number
    base_attack?: IntFieldUpdateOperationsInput | number
    base_armor?: IntFieldUpdateOperationsInput | number
    base_speed?: IntFieldUpdateOperationsInput | number
    magic_points?: NullableIntFieldUpdateOperationsInput | number | null
    current_mp?: NullableIntFieldUpdateOperationsInput | number | null
    isNPC?: BoolFieldUpdateOperationsInput | boolean
    location_coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    stagescompleted?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutCharacterNestedInput
    inventory?: Character_GearUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    character_class?: StringFieldUpdateOperationsInput | string
    currentHP?: IntFieldUpdateOperationsInput | number
    maxHP?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
    gold?: IntFieldUpdateOperationsInput | number
    head_gear1?: NullableIntFieldUpdateOperationsInput | number | null
    left_hand_gear2?: NullableIntFieldUpdateOperationsInput | number | null
    right_hand_gear3?: NullableIntFieldUpdateOperationsInput | number | null
    foot_gear4?: NullableIntFieldUpdateOperationsInput | number | null
    chest_gear5?: NullableIntFieldUpdateOperationsInput | number | null
    backpack1?: IntFieldUpdateOperationsInput | number
    backpack2?: IntFieldUpdateOperationsInput | number
    backpack3?: IntFieldUpdateOperationsInput | number
    backpack4?: IntFieldUpdateOperationsInput | number
    backpack5?: IntFieldUpdateOperationsInput | number
    backpack6?: IntFieldUpdateOperationsInput | number
    backpack7?: IntFieldUpdateOperationsInput | number
    backpack8?: IntFieldUpdateOperationsInput | number
    base_attack?: IntFieldUpdateOperationsInput | number
    base_armor?: IntFieldUpdateOperationsInput | number
    base_speed?: IntFieldUpdateOperationsInput | number
    magic_points?: NullableIntFieldUpdateOperationsInput | number | null
    current_mp?: NullableIntFieldUpdateOperationsInput | number | null
    isNPC?: BoolFieldUpdateOperationsInput | boolean
    location_coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    stagescompleted?: IntFieldUpdateOperationsInput | number
    user?: UserUncheckedUpdateOneWithoutCharacterNestedInput
    inventory?: Character_GearUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterCreateManyInput = {
    id?: number
    name: string
    gender: string
    character_class: string
    currentHP: number
    maxHP: number
    xp: number
    level: number
    graphicUrl: string
    gold: number
    head_gear1?: number | null
    left_hand_gear2?: number | null
    right_hand_gear3?: number | null
    foot_gear4?: number | null
    chest_gear5?: number | null
    backpack1?: number
    backpack2?: number
    backpack3?: number
    backpack4?: number
    backpack5?: number
    backpack6?: number
    backpack7?: number
    backpack8?: number
    base_attack: number
    base_armor: number
    base_speed: number
    magic_points?: number | null
    current_mp?: number | null
    isNPC?: boolean
    location_coordinates?: string | null
    stagescompleted?: number
  }

  export type CharacterUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    character_class?: StringFieldUpdateOperationsInput | string
    currentHP?: IntFieldUpdateOperationsInput | number
    maxHP?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
    gold?: IntFieldUpdateOperationsInput | number
    head_gear1?: NullableIntFieldUpdateOperationsInput | number | null
    left_hand_gear2?: NullableIntFieldUpdateOperationsInput | number | null
    right_hand_gear3?: NullableIntFieldUpdateOperationsInput | number | null
    foot_gear4?: NullableIntFieldUpdateOperationsInput | number | null
    chest_gear5?: NullableIntFieldUpdateOperationsInput | number | null
    backpack1?: IntFieldUpdateOperationsInput | number
    backpack2?: IntFieldUpdateOperationsInput | number
    backpack3?: IntFieldUpdateOperationsInput | number
    backpack4?: IntFieldUpdateOperationsInput | number
    backpack5?: IntFieldUpdateOperationsInput | number
    backpack6?: IntFieldUpdateOperationsInput | number
    backpack7?: IntFieldUpdateOperationsInput | number
    backpack8?: IntFieldUpdateOperationsInput | number
    base_attack?: IntFieldUpdateOperationsInput | number
    base_armor?: IntFieldUpdateOperationsInput | number
    base_speed?: IntFieldUpdateOperationsInput | number
    magic_points?: NullableIntFieldUpdateOperationsInput | number | null
    current_mp?: NullableIntFieldUpdateOperationsInput | number | null
    isNPC?: BoolFieldUpdateOperationsInput | boolean
    location_coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    stagescompleted?: IntFieldUpdateOperationsInput | number
  }

  export type CharacterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    character_class?: StringFieldUpdateOperationsInput | string
    currentHP?: IntFieldUpdateOperationsInput | number
    maxHP?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
    gold?: IntFieldUpdateOperationsInput | number
    head_gear1?: NullableIntFieldUpdateOperationsInput | number | null
    left_hand_gear2?: NullableIntFieldUpdateOperationsInput | number | null
    right_hand_gear3?: NullableIntFieldUpdateOperationsInput | number | null
    foot_gear4?: NullableIntFieldUpdateOperationsInput | number | null
    chest_gear5?: NullableIntFieldUpdateOperationsInput | number | null
    backpack1?: IntFieldUpdateOperationsInput | number
    backpack2?: IntFieldUpdateOperationsInput | number
    backpack3?: IntFieldUpdateOperationsInput | number
    backpack4?: IntFieldUpdateOperationsInput | number
    backpack5?: IntFieldUpdateOperationsInput | number
    backpack6?: IntFieldUpdateOperationsInput | number
    backpack7?: IntFieldUpdateOperationsInput | number
    backpack8?: IntFieldUpdateOperationsInput | number
    base_attack?: IntFieldUpdateOperationsInput | number
    base_armor?: IntFieldUpdateOperationsInput | number
    base_speed?: IntFieldUpdateOperationsInput | number
    magic_points?: NullableIntFieldUpdateOperationsInput | number | null
    current_mp?: NullableIntFieldUpdateOperationsInput | number | null
    isNPC?: BoolFieldUpdateOperationsInput | boolean
    location_coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    stagescompleted?: IntFieldUpdateOperationsInput | number
  }

  export type Character_GearCreateInput = {
    Character: CharacterCreateNestedOneWithoutInventoryInput
    gear: GearCreateNestedOneWithoutCharacter_GearInput
  }

  export type Character_GearUncheckedCreateInput = {
    id?: number
    character_id: number
    gear_id: number
  }

  export type Character_GearUpdateInput = {
    Character?: CharacterUpdateOneRequiredWithoutInventoryNestedInput
    gear?: GearUpdateOneRequiredWithoutCharacter_GearNestedInput
  }

  export type Character_GearUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    character_id?: IntFieldUpdateOperationsInput | number
    gear_id?: IntFieldUpdateOperationsInput | number
  }

  export type Character_GearCreateManyInput = {
    id?: number
    character_id: number
    gear_id: number
  }

  export type Character_GearUpdateManyMutationInput = {

  }

  export type Character_GearUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    character_id?: IntFieldUpdateOperationsInput | number
    gear_id?: IntFieldUpdateOperationsInput | number
  }

  export type GearCreateInput = {
    name: string
    description: string
    attack: number
    armor: number
    isTwoHanded: boolean
    equip_location: number
    preferred_class: string
    health_bonus: number
    armor_bonus: number
    attack_bonus: number
    speed_bonus: number
    graphicUrl: string
    price: number
    Character_Gear?: Character_GearCreateNestedManyWithoutGearInput
  }

  export type GearUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    attack: number
    armor: number
    isTwoHanded: boolean
    equip_location: number
    preferred_class: string
    health_bonus: number
    armor_bonus: number
    attack_bonus: number
    speed_bonus: number
    graphicUrl: string
    price: number
    Character_Gear?: Character_GearUncheckedCreateNestedManyWithoutGearInput
  }

  export type GearUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    attack?: IntFieldUpdateOperationsInput | number
    armor?: IntFieldUpdateOperationsInput | number
    isTwoHanded?: BoolFieldUpdateOperationsInput | boolean
    equip_location?: IntFieldUpdateOperationsInput | number
    preferred_class?: StringFieldUpdateOperationsInput | string
    health_bonus?: IntFieldUpdateOperationsInput | number
    armor_bonus?: IntFieldUpdateOperationsInput | number
    attack_bonus?: IntFieldUpdateOperationsInput | number
    speed_bonus?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    Character_Gear?: Character_GearUpdateManyWithoutGearNestedInput
  }

  export type GearUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    attack?: IntFieldUpdateOperationsInput | number
    armor?: IntFieldUpdateOperationsInput | number
    isTwoHanded?: BoolFieldUpdateOperationsInput | boolean
    equip_location?: IntFieldUpdateOperationsInput | number
    preferred_class?: StringFieldUpdateOperationsInput | string
    health_bonus?: IntFieldUpdateOperationsInput | number
    armor_bonus?: IntFieldUpdateOperationsInput | number
    attack_bonus?: IntFieldUpdateOperationsInput | number
    speed_bonus?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    Character_Gear?: Character_GearUncheckedUpdateManyWithoutGearNestedInput
  }

  export type GearCreateManyInput = {
    id?: number
    name: string
    description: string
    attack: number
    armor: number
    isTwoHanded: boolean
    equip_location: number
    preferred_class: string
    health_bonus: number
    armor_bonus: number
    attack_bonus: number
    speed_bonus: number
    graphicUrl: string
    price: number
  }

  export type GearUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    attack?: IntFieldUpdateOperationsInput | number
    armor?: IntFieldUpdateOperationsInput | number
    isTwoHanded?: BoolFieldUpdateOperationsInput | boolean
    equip_location?: IntFieldUpdateOperationsInput | number
    preferred_class?: StringFieldUpdateOperationsInput | string
    health_bonus?: IntFieldUpdateOperationsInput | number
    armor_bonus?: IntFieldUpdateOperationsInput | number
    attack_bonus?: IntFieldUpdateOperationsInput | number
    speed_bonus?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type GearUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    attack?: IntFieldUpdateOperationsInput | number
    armor?: IntFieldUpdateOperationsInput | number
    isTwoHanded?: BoolFieldUpdateOperationsInput | boolean
    equip_location?: IntFieldUpdateOperationsInput | number
    preferred_class?: StringFieldUpdateOperationsInput | string
    health_bonus?: IntFieldUpdateOperationsInput | number
    armor_bonus?: IntFieldUpdateOperationsInput | number
    attack_bonus?: IntFieldUpdateOperationsInput | number
    speed_bonus?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type Character_ClassCreateInput = {
    name: string
    description: string
    beginning_attack: number
    beginning_armor: number
    beginning_speed: number
    beginning_hp: number
    graphicUrl: string
  }

  export type Character_ClassUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    beginning_attack: number
    beginning_armor: number
    beginning_speed: number
    beginning_hp: number
    graphicUrl: string
  }

  export type Character_ClassUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    beginning_attack?: IntFieldUpdateOperationsInput | number
    beginning_armor?: IntFieldUpdateOperationsInput | number
    beginning_speed?: IntFieldUpdateOperationsInput | number
    beginning_hp?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Character_ClassUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    beginning_attack?: IntFieldUpdateOperationsInput | number
    beginning_armor?: IntFieldUpdateOperationsInput | number
    beginning_speed?: IntFieldUpdateOperationsInput | number
    beginning_hp?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Character_ClassCreateManyInput = {
    id?: number
    name: string
    description: string
    beginning_attack: number
    beginning_armor: number
    beginning_speed: number
    beginning_hp: number
    graphicUrl: string
  }

  export type Character_ClassUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    beginning_attack?: IntFieldUpdateOperationsInput | number
    beginning_armor?: IntFieldUpdateOperationsInput | number
    beginning_speed?: IntFieldUpdateOperationsInput | number
    beginning_hp?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
  }

  export type Character_ClassUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    beginning_attack?: IntFieldUpdateOperationsInput | number
    beginning_armor?: IntFieldUpdateOperationsInput | number
    beginning_speed?: IntFieldUpdateOperationsInput | number
    beginning_hp?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
  }

  export type MonsterCreateInput = {
    name: string
    description: string
    base_attack: number
    base_armor: number
    base_speed: number
    level: number
    attack_name: string
    graphicUrl: string
    xp_base_value: number
    maxHP: number
    currentHP: number
    isBoss?: boolean
    loot_value: number
  }

  export type MonsterUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    base_attack: number
    base_armor: number
    base_speed: number
    level: number
    attack_name: string
    graphicUrl: string
    xp_base_value: number
    maxHP: number
    currentHP: number
    isBoss?: boolean
    loot_value: number
  }

  export type MonsterUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    base_attack?: IntFieldUpdateOperationsInput | number
    base_armor?: IntFieldUpdateOperationsInput | number
    base_speed?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    attack_name?: StringFieldUpdateOperationsInput | string
    graphicUrl?: StringFieldUpdateOperationsInput | string
    xp_base_value?: IntFieldUpdateOperationsInput | number
    maxHP?: IntFieldUpdateOperationsInput | number
    currentHP?: IntFieldUpdateOperationsInput | number
    isBoss?: BoolFieldUpdateOperationsInput | boolean
    loot_value?: IntFieldUpdateOperationsInput | number
  }

  export type MonsterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    base_attack?: IntFieldUpdateOperationsInput | number
    base_armor?: IntFieldUpdateOperationsInput | number
    base_speed?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    attack_name?: StringFieldUpdateOperationsInput | string
    graphicUrl?: StringFieldUpdateOperationsInput | string
    xp_base_value?: IntFieldUpdateOperationsInput | number
    maxHP?: IntFieldUpdateOperationsInput | number
    currentHP?: IntFieldUpdateOperationsInput | number
    isBoss?: BoolFieldUpdateOperationsInput | boolean
    loot_value?: IntFieldUpdateOperationsInput | number
  }

  export type MonsterCreateManyInput = {
    id?: number
    name: string
    description: string
    base_attack: number
    base_armor: number
    base_speed: number
    level: number
    attack_name: string
    graphicUrl: string
    xp_base_value: number
    maxHP: number
    currentHP: number
    isBoss?: boolean
    loot_value: number
  }

  export type MonsterUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    base_attack?: IntFieldUpdateOperationsInput | number
    base_armor?: IntFieldUpdateOperationsInput | number
    base_speed?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    attack_name?: StringFieldUpdateOperationsInput | string
    graphicUrl?: StringFieldUpdateOperationsInput | string
    xp_base_value?: IntFieldUpdateOperationsInput | number
    maxHP?: IntFieldUpdateOperationsInput | number
    currentHP?: IntFieldUpdateOperationsInput | number
    isBoss?: BoolFieldUpdateOperationsInput | boolean
    loot_value?: IntFieldUpdateOperationsInput | number
  }

  export type MonsterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    base_attack?: IntFieldUpdateOperationsInput | number
    base_armor?: IntFieldUpdateOperationsInput | number
    base_speed?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    attack_name?: StringFieldUpdateOperationsInput | string
    graphicUrl?: StringFieldUpdateOperationsInput | string
    xp_base_value?: IntFieldUpdateOperationsInput | number
    maxHP?: IntFieldUpdateOperationsInput | number
    currentHP?: IntFieldUpdateOperationsInput | number
    isBoss?: BoolFieldUpdateOperationsInput | boolean
    loot_value?: IntFieldUpdateOperationsInput | number
  }

  export type SpellsCreateInput = {
    spell_name: string
    description: string
    health_bonus: number
    armor_bonus: number
    attack_bonus: number
    speed_bonus: number
    graphicUrl: string
    level: number
  }

  export type SpellsUncheckedCreateInput = {
    id?: number
    spell_name: string
    description: string
    health_bonus: number
    armor_bonus: number
    attack_bonus: number
    speed_bonus: number
    graphicUrl: string
    level: number
  }

  export type SpellsUpdateInput = {
    spell_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    health_bonus?: IntFieldUpdateOperationsInput | number
    armor_bonus?: IntFieldUpdateOperationsInput | number
    attack_bonus?: IntFieldUpdateOperationsInput | number
    speed_bonus?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
  }

  export type SpellsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    spell_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    health_bonus?: IntFieldUpdateOperationsInput | number
    armor_bonus?: IntFieldUpdateOperationsInput | number
    attack_bonus?: IntFieldUpdateOperationsInput | number
    speed_bonus?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
  }

  export type SpellsCreateManyInput = {
    id?: number
    spell_name: string
    description: string
    health_bonus: number
    armor_bonus: number
    attack_bonus: number
    speed_bonus: number
    graphicUrl: string
    level: number
  }

  export type SpellsUpdateManyMutationInput = {
    spell_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    health_bonus?: IntFieldUpdateOperationsInput | number
    armor_bonus?: IntFieldUpdateOperationsInput | number
    attack_bonus?: IntFieldUpdateOperationsInput | number
    speed_bonus?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
  }

  export type SpellsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    spell_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    health_bonus?: IntFieldUpdateOperationsInput | number
    armor_bonus?: IntFieldUpdateOperationsInput | number
    attack_bonus?: IntFieldUpdateOperationsInput | number
    speed_bonus?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CharacterNullableRelationFilter = {
    is?: CharacterWhereInput | null
    isNot?: CharacterWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
    isBanned?: SortOrder
    createdAt?: SortOrder
    character_id?: SortOrder
    phone?: SortOrder
    email?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    character_id?: SortOrder
    phone?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
    isBanned?: SortOrder
    createdAt?: SortOrder
    character_id?: SortOrder
    phone?: SortOrder
    email?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
    isBanned?: SortOrder
    createdAt?: SortOrder
    character_id?: SortOrder
    phone?: SortOrder
    email?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    character_id?: SortOrder
    phone?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type Character_GearListRelationFilter = {
    every?: Character_GearWhereInput
    some?: Character_GearWhereInput
    none?: Character_GearWhereInput
  }

  export type Character_GearOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CharacterCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    character_class?: SortOrder
    currentHP?: SortOrder
    maxHP?: SortOrder
    xp?: SortOrder
    level?: SortOrder
    graphicUrl?: SortOrder
    gold?: SortOrder
    head_gear1?: SortOrder
    left_hand_gear2?: SortOrder
    right_hand_gear3?: SortOrder
    foot_gear4?: SortOrder
    chest_gear5?: SortOrder
    backpack1?: SortOrder
    backpack2?: SortOrder
    backpack3?: SortOrder
    backpack4?: SortOrder
    backpack5?: SortOrder
    backpack6?: SortOrder
    backpack7?: SortOrder
    backpack8?: SortOrder
    base_attack?: SortOrder
    base_armor?: SortOrder
    base_speed?: SortOrder
    magic_points?: SortOrder
    current_mp?: SortOrder
    isNPC?: SortOrder
    location_coordinates?: SortOrder
    stagescompleted?: SortOrder
  }

  export type CharacterAvgOrderByAggregateInput = {
    id?: SortOrder
    currentHP?: SortOrder
    maxHP?: SortOrder
    xp?: SortOrder
    level?: SortOrder
    gold?: SortOrder
    head_gear1?: SortOrder
    left_hand_gear2?: SortOrder
    right_hand_gear3?: SortOrder
    foot_gear4?: SortOrder
    chest_gear5?: SortOrder
    backpack1?: SortOrder
    backpack2?: SortOrder
    backpack3?: SortOrder
    backpack4?: SortOrder
    backpack5?: SortOrder
    backpack6?: SortOrder
    backpack7?: SortOrder
    backpack8?: SortOrder
    base_attack?: SortOrder
    base_armor?: SortOrder
    base_speed?: SortOrder
    magic_points?: SortOrder
    current_mp?: SortOrder
    stagescompleted?: SortOrder
  }

  export type CharacterMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    character_class?: SortOrder
    currentHP?: SortOrder
    maxHP?: SortOrder
    xp?: SortOrder
    level?: SortOrder
    graphicUrl?: SortOrder
    gold?: SortOrder
    head_gear1?: SortOrder
    left_hand_gear2?: SortOrder
    right_hand_gear3?: SortOrder
    foot_gear4?: SortOrder
    chest_gear5?: SortOrder
    backpack1?: SortOrder
    backpack2?: SortOrder
    backpack3?: SortOrder
    backpack4?: SortOrder
    backpack5?: SortOrder
    backpack6?: SortOrder
    backpack7?: SortOrder
    backpack8?: SortOrder
    base_attack?: SortOrder
    base_armor?: SortOrder
    base_speed?: SortOrder
    magic_points?: SortOrder
    current_mp?: SortOrder
    isNPC?: SortOrder
    location_coordinates?: SortOrder
    stagescompleted?: SortOrder
  }

  export type CharacterMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    character_class?: SortOrder
    currentHP?: SortOrder
    maxHP?: SortOrder
    xp?: SortOrder
    level?: SortOrder
    graphicUrl?: SortOrder
    gold?: SortOrder
    head_gear1?: SortOrder
    left_hand_gear2?: SortOrder
    right_hand_gear3?: SortOrder
    foot_gear4?: SortOrder
    chest_gear5?: SortOrder
    backpack1?: SortOrder
    backpack2?: SortOrder
    backpack3?: SortOrder
    backpack4?: SortOrder
    backpack5?: SortOrder
    backpack6?: SortOrder
    backpack7?: SortOrder
    backpack8?: SortOrder
    base_attack?: SortOrder
    base_armor?: SortOrder
    base_speed?: SortOrder
    magic_points?: SortOrder
    current_mp?: SortOrder
    isNPC?: SortOrder
    location_coordinates?: SortOrder
    stagescompleted?: SortOrder
  }

  export type CharacterSumOrderByAggregateInput = {
    id?: SortOrder
    currentHP?: SortOrder
    maxHP?: SortOrder
    xp?: SortOrder
    level?: SortOrder
    gold?: SortOrder
    head_gear1?: SortOrder
    left_hand_gear2?: SortOrder
    right_hand_gear3?: SortOrder
    foot_gear4?: SortOrder
    chest_gear5?: SortOrder
    backpack1?: SortOrder
    backpack2?: SortOrder
    backpack3?: SortOrder
    backpack4?: SortOrder
    backpack5?: SortOrder
    backpack6?: SortOrder
    backpack7?: SortOrder
    backpack8?: SortOrder
    base_attack?: SortOrder
    base_armor?: SortOrder
    base_speed?: SortOrder
    magic_points?: SortOrder
    current_mp?: SortOrder
    stagescompleted?: SortOrder
  }

  export type CharacterRelationFilter = {
    is?: CharacterWhereInput
    isNot?: CharacterWhereInput
  }

  export type GearRelationFilter = {
    is?: GearWhereInput
    isNot?: GearWhereInput
  }

  export type Character_GearCountOrderByAggregateInput = {
    id?: SortOrder
    character_id?: SortOrder
    gear_id?: SortOrder
  }

  export type Character_GearAvgOrderByAggregateInput = {
    id?: SortOrder
    character_id?: SortOrder
    gear_id?: SortOrder
  }

  export type Character_GearMaxOrderByAggregateInput = {
    id?: SortOrder
    character_id?: SortOrder
    gear_id?: SortOrder
  }

  export type Character_GearMinOrderByAggregateInput = {
    id?: SortOrder
    character_id?: SortOrder
    gear_id?: SortOrder
  }

  export type Character_GearSumOrderByAggregateInput = {
    id?: SortOrder
    character_id?: SortOrder
    gear_id?: SortOrder
  }

  export type GearCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    attack?: SortOrder
    armor?: SortOrder
    isTwoHanded?: SortOrder
    equip_location?: SortOrder
    preferred_class?: SortOrder
    health_bonus?: SortOrder
    armor_bonus?: SortOrder
    attack_bonus?: SortOrder
    speed_bonus?: SortOrder
    graphicUrl?: SortOrder
    price?: SortOrder
  }

  export type GearAvgOrderByAggregateInput = {
    id?: SortOrder
    attack?: SortOrder
    armor?: SortOrder
    equip_location?: SortOrder
    health_bonus?: SortOrder
    armor_bonus?: SortOrder
    attack_bonus?: SortOrder
    speed_bonus?: SortOrder
    price?: SortOrder
  }

  export type GearMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    attack?: SortOrder
    armor?: SortOrder
    isTwoHanded?: SortOrder
    equip_location?: SortOrder
    preferred_class?: SortOrder
    health_bonus?: SortOrder
    armor_bonus?: SortOrder
    attack_bonus?: SortOrder
    speed_bonus?: SortOrder
    graphicUrl?: SortOrder
    price?: SortOrder
  }

  export type GearMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    attack?: SortOrder
    armor?: SortOrder
    isTwoHanded?: SortOrder
    equip_location?: SortOrder
    preferred_class?: SortOrder
    health_bonus?: SortOrder
    armor_bonus?: SortOrder
    attack_bonus?: SortOrder
    speed_bonus?: SortOrder
    graphicUrl?: SortOrder
    price?: SortOrder
  }

  export type GearSumOrderByAggregateInput = {
    id?: SortOrder
    attack?: SortOrder
    armor?: SortOrder
    equip_location?: SortOrder
    health_bonus?: SortOrder
    armor_bonus?: SortOrder
    attack_bonus?: SortOrder
    speed_bonus?: SortOrder
    price?: SortOrder
  }

  export type Character_ClassCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    beginning_attack?: SortOrder
    beginning_armor?: SortOrder
    beginning_speed?: SortOrder
    beginning_hp?: SortOrder
    graphicUrl?: SortOrder
  }

  export type Character_ClassAvgOrderByAggregateInput = {
    id?: SortOrder
    beginning_attack?: SortOrder
    beginning_armor?: SortOrder
    beginning_speed?: SortOrder
    beginning_hp?: SortOrder
  }

  export type Character_ClassMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    beginning_attack?: SortOrder
    beginning_armor?: SortOrder
    beginning_speed?: SortOrder
    beginning_hp?: SortOrder
    graphicUrl?: SortOrder
  }

  export type Character_ClassMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    beginning_attack?: SortOrder
    beginning_armor?: SortOrder
    beginning_speed?: SortOrder
    beginning_hp?: SortOrder
    graphicUrl?: SortOrder
  }

  export type Character_ClassSumOrderByAggregateInput = {
    id?: SortOrder
    beginning_attack?: SortOrder
    beginning_armor?: SortOrder
    beginning_speed?: SortOrder
    beginning_hp?: SortOrder
  }

  export type MonsterCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    base_attack?: SortOrder
    base_armor?: SortOrder
    base_speed?: SortOrder
    level?: SortOrder
    attack_name?: SortOrder
    graphicUrl?: SortOrder
    xp_base_value?: SortOrder
    maxHP?: SortOrder
    currentHP?: SortOrder
    isBoss?: SortOrder
    loot_value?: SortOrder
  }

  export type MonsterAvgOrderByAggregateInput = {
    id?: SortOrder
    base_attack?: SortOrder
    base_armor?: SortOrder
    base_speed?: SortOrder
    level?: SortOrder
    xp_base_value?: SortOrder
    maxHP?: SortOrder
    currentHP?: SortOrder
    loot_value?: SortOrder
  }

  export type MonsterMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    base_attack?: SortOrder
    base_armor?: SortOrder
    base_speed?: SortOrder
    level?: SortOrder
    attack_name?: SortOrder
    graphicUrl?: SortOrder
    xp_base_value?: SortOrder
    maxHP?: SortOrder
    currentHP?: SortOrder
    isBoss?: SortOrder
    loot_value?: SortOrder
  }

  export type MonsterMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    base_attack?: SortOrder
    base_armor?: SortOrder
    base_speed?: SortOrder
    level?: SortOrder
    attack_name?: SortOrder
    graphicUrl?: SortOrder
    xp_base_value?: SortOrder
    maxHP?: SortOrder
    currentHP?: SortOrder
    isBoss?: SortOrder
    loot_value?: SortOrder
  }

  export type MonsterSumOrderByAggregateInput = {
    id?: SortOrder
    base_attack?: SortOrder
    base_armor?: SortOrder
    base_speed?: SortOrder
    level?: SortOrder
    xp_base_value?: SortOrder
    maxHP?: SortOrder
    currentHP?: SortOrder
    loot_value?: SortOrder
  }

  export type SpellsCountOrderByAggregateInput = {
    id?: SortOrder
    spell_name?: SortOrder
    description?: SortOrder
    health_bonus?: SortOrder
    armor_bonus?: SortOrder
    attack_bonus?: SortOrder
    speed_bonus?: SortOrder
    graphicUrl?: SortOrder
    level?: SortOrder
  }

  export type SpellsAvgOrderByAggregateInput = {
    id?: SortOrder
    health_bonus?: SortOrder
    armor_bonus?: SortOrder
    attack_bonus?: SortOrder
    speed_bonus?: SortOrder
    level?: SortOrder
  }

  export type SpellsMaxOrderByAggregateInput = {
    id?: SortOrder
    spell_name?: SortOrder
    description?: SortOrder
    health_bonus?: SortOrder
    armor_bonus?: SortOrder
    attack_bonus?: SortOrder
    speed_bonus?: SortOrder
    graphicUrl?: SortOrder
    level?: SortOrder
  }

  export type SpellsMinOrderByAggregateInput = {
    id?: SortOrder
    spell_name?: SortOrder
    description?: SortOrder
    health_bonus?: SortOrder
    armor_bonus?: SortOrder
    attack_bonus?: SortOrder
    speed_bonus?: SortOrder
    graphicUrl?: SortOrder
    level?: SortOrder
  }

  export type SpellsSumOrderByAggregateInput = {
    id?: SortOrder
    health_bonus?: SortOrder
    armor_bonus?: SortOrder
    attack_bonus?: SortOrder
    speed_bonus?: SortOrder
    level?: SortOrder
  }

  export type CharacterCreateNestedOneWithoutUserInput = {
    create?: XOR<CharacterCreateWithoutUserInput, CharacterUncheckedCreateWithoutUserInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutUserInput
    connect?: CharacterWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CharacterUpdateOneWithoutUserNestedInput = {
    create?: XOR<CharacterCreateWithoutUserInput, CharacterUncheckedCreateWithoutUserInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutUserInput
    upsert?: CharacterUpsertWithoutUserInput
    disconnect?: CharacterWhereInput | boolean
    delete?: CharacterWhereInput | boolean
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutUserInput, CharacterUpdateWithoutUserInput>, CharacterUncheckedUpdateWithoutUserInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutCharacterInput = {
    create?: XOR<UserCreateWithoutCharacterInput, UserUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: UserCreateOrConnectWithoutCharacterInput
    connect?: UserWhereUniqueInput
  }

  export type Character_GearCreateNestedManyWithoutCharacterInput = {
    create?: XOR<Character_GearCreateWithoutCharacterInput, Character_GearUncheckedCreateWithoutCharacterInput> | Character_GearCreateWithoutCharacterInput[] | Character_GearUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: Character_GearCreateOrConnectWithoutCharacterInput | Character_GearCreateOrConnectWithoutCharacterInput[]
    createMany?: Character_GearCreateManyCharacterInputEnvelope
    connect?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedOneWithoutCharacterInput = {
    create?: XOR<UserCreateWithoutCharacterInput, UserUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: UserCreateOrConnectWithoutCharacterInput
    connect?: UserWhereUniqueInput
  }

  export type Character_GearUncheckedCreateNestedManyWithoutCharacterInput = {
    create?: XOR<Character_GearCreateWithoutCharacterInput, Character_GearUncheckedCreateWithoutCharacterInput> | Character_GearCreateWithoutCharacterInput[] | Character_GearUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: Character_GearCreateOrConnectWithoutCharacterInput | Character_GearCreateOrConnectWithoutCharacterInput[]
    createMany?: Character_GearCreateManyCharacterInputEnvelope
    connect?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutCharacterNestedInput = {
    create?: XOR<UserCreateWithoutCharacterInput, UserUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: UserCreateOrConnectWithoutCharacterInput
    upsert?: UserUpsertWithoutCharacterInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCharacterInput, UserUpdateWithoutCharacterInput>, UserUncheckedUpdateWithoutCharacterInput>
  }

  export type Character_GearUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<Character_GearCreateWithoutCharacterInput, Character_GearUncheckedCreateWithoutCharacterInput> | Character_GearCreateWithoutCharacterInput[] | Character_GearUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: Character_GearCreateOrConnectWithoutCharacterInput | Character_GearCreateOrConnectWithoutCharacterInput[]
    upsert?: Character_GearUpsertWithWhereUniqueWithoutCharacterInput | Character_GearUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: Character_GearCreateManyCharacterInputEnvelope
    set?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
    disconnect?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
    delete?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
    connect?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
    update?: Character_GearUpdateWithWhereUniqueWithoutCharacterInput | Character_GearUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: Character_GearUpdateManyWithWhereWithoutCharacterInput | Character_GearUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: Character_GearScalarWhereInput | Character_GearScalarWhereInput[]
  }

  export type UserUncheckedUpdateOneWithoutCharacterNestedInput = {
    create?: XOR<UserCreateWithoutCharacterInput, UserUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: UserCreateOrConnectWithoutCharacterInput
    upsert?: UserUpsertWithoutCharacterInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCharacterInput, UserUpdateWithoutCharacterInput>, UserUncheckedUpdateWithoutCharacterInput>
  }

  export type Character_GearUncheckedUpdateManyWithoutCharacterNestedInput = {
    create?: XOR<Character_GearCreateWithoutCharacterInput, Character_GearUncheckedCreateWithoutCharacterInput> | Character_GearCreateWithoutCharacterInput[] | Character_GearUncheckedCreateWithoutCharacterInput[]
    connectOrCreate?: Character_GearCreateOrConnectWithoutCharacterInput | Character_GearCreateOrConnectWithoutCharacterInput[]
    upsert?: Character_GearUpsertWithWhereUniqueWithoutCharacterInput | Character_GearUpsertWithWhereUniqueWithoutCharacterInput[]
    createMany?: Character_GearCreateManyCharacterInputEnvelope
    set?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
    disconnect?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
    delete?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
    connect?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
    update?: Character_GearUpdateWithWhereUniqueWithoutCharacterInput | Character_GearUpdateWithWhereUniqueWithoutCharacterInput[]
    updateMany?: Character_GearUpdateManyWithWhereWithoutCharacterInput | Character_GearUpdateManyWithWhereWithoutCharacterInput[]
    deleteMany?: Character_GearScalarWhereInput | Character_GearScalarWhereInput[]
  }

  export type CharacterCreateNestedOneWithoutInventoryInput = {
    create?: XOR<CharacterCreateWithoutInventoryInput, CharacterUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutInventoryInput
    connect?: CharacterWhereUniqueInput
  }

  export type GearCreateNestedOneWithoutCharacter_GearInput = {
    create?: XOR<GearCreateWithoutCharacter_GearInput, GearUncheckedCreateWithoutCharacter_GearInput>
    connectOrCreate?: GearCreateOrConnectWithoutCharacter_GearInput
    connect?: GearWhereUniqueInput
  }

  export type CharacterUpdateOneRequiredWithoutInventoryNestedInput = {
    create?: XOR<CharacterCreateWithoutInventoryInput, CharacterUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutInventoryInput
    upsert?: CharacterUpsertWithoutInventoryInput
    connect?: CharacterWhereUniqueInput
    update?: XOR<XOR<CharacterUpdateToOneWithWhereWithoutInventoryInput, CharacterUpdateWithoutInventoryInput>, CharacterUncheckedUpdateWithoutInventoryInput>
  }

  export type GearUpdateOneRequiredWithoutCharacter_GearNestedInput = {
    create?: XOR<GearCreateWithoutCharacter_GearInput, GearUncheckedCreateWithoutCharacter_GearInput>
    connectOrCreate?: GearCreateOrConnectWithoutCharacter_GearInput
    upsert?: GearUpsertWithoutCharacter_GearInput
    connect?: GearWhereUniqueInput
    update?: XOR<XOR<GearUpdateToOneWithWhereWithoutCharacter_GearInput, GearUpdateWithoutCharacter_GearInput>, GearUncheckedUpdateWithoutCharacter_GearInput>
  }

  export type Character_GearCreateNestedManyWithoutGearInput = {
    create?: XOR<Character_GearCreateWithoutGearInput, Character_GearUncheckedCreateWithoutGearInput> | Character_GearCreateWithoutGearInput[] | Character_GearUncheckedCreateWithoutGearInput[]
    connectOrCreate?: Character_GearCreateOrConnectWithoutGearInput | Character_GearCreateOrConnectWithoutGearInput[]
    createMany?: Character_GearCreateManyGearInputEnvelope
    connect?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
  }

  export type Character_GearUncheckedCreateNestedManyWithoutGearInput = {
    create?: XOR<Character_GearCreateWithoutGearInput, Character_GearUncheckedCreateWithoutGearInput> | Character_GearCreateWithoutGearInput[] | Character_GearUncheckedCreateWithoutGearInput[]
    connectOrCreate?: Character_GearCreateOrConnectWithoutGearInput | Character_GearCreateOrConnectWithoutGearInput[]
    createMany?: Character_GearCreateManyGearInputEnvelope
    connect?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
  }

  export type Character_GearUpdateManyWithoutGearNestedInput = {
    create?: XOR<Character_GearCreateWithoutGearInput, Character_GearUncheckedCreateWithoutGearInput> | Character_GearCreateWithoutGearInput[] | Character_GearUncheckedCreateWithoutGearInput[]
    connectOrCreate?: Character_GearCreateOrConnectWithoutGearInput | Character_GearCreateOrConnectWithoutGearInput[]
    upsert?: Character_GearUpsertWithWhereUniqueWithoutGearInput | Character_GearUpsertWithWhereUniqueWithoutGearInput[]
    createMany?: Character_GearCreateManyGearInputEnvelope
    set?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
    disconnect?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
    delete?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
    connect?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
    update?: Character_GearUpdateWithWhereUniqueWithoutGearInput | Character_GearUpdateWithWhereUniqueWithoutGearInput[]
    updateMany?: Character_GearUpdateManyWithWhereWithoutGearInput | Character_GearUpdateManyWithWhereWithoutGearInput[]
    deleteMany?: Character_GearScalarWhereInput | Character_GearScalarWhereInput[]
  }

  export type Character_GearUncheckedUpdateManyWithoutGearNestedInput = {
    create?: XOR<Character_GearCreateWithoutGearInput, Character_GearUncheckedCreateWithoutGearInput> | Character_GearCreateWithoutGearInput[] | Character_GearUncheckedCreateWithoutGearInput[]
    connectOrCreate?: Character_GearCreateOrConnectWithoutGearInput | Character_GearCreateOrConnectWithoutGearInput[]
    upsert?: Character_GearUpsertWithWhereUniqueWithoutGearInput | Character_GearUpsertWithWhereUniqueWithoutGearInput[]
    createMany?: Character_GearCreateManyGearInputEnvelope
    set?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
    disconnect?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
    delete?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
    connect?: Character_GearWhereUniqueInput | Character_GearWhereUniqueInput[]
    update?: Character_GearUpdateWithWhereUniqueWithoutGearInput | Character_GearUpdateWithWhereUniqueWithoutGearInput[]
    updateMany?: Character_GearUpdateManyWithWhereWithoutGearInput | Character_GearUpdateManyWithWhereWithoutGearInput[]
    deleteMany?: Character_GearScalarWhereInput | Character_GearScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CharacterCreateWithoutUserInput = {
    name: string
    gender: string
    character_class: string
    currentHP: number
    maxHP: number
    xp: number
    level: number
    graphicUrl: string
    gold: number
    head_gear1?: number | null
    left_hand_gear2?: number | null
    right_hand_gear3?: number | null
    foot_gear4?: number | null
    chest_gear5?: number | null
    backpack1?: number
    backpack2?: number
    backpack3?: number
    backpack4?: number
    backpack5?: number
    backpack6?: number
    backpack7?: number
    backpack8?: number
    base_attack: number
    base_armor: number
    base_speed: number
    magic_points?: number | null
    current_mp?: number | null
    isNPC?: boolean
    location_coordinates?: string | null
    stagescompleted?: number
    inventory?: Character_GearCreateNestedManyWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    gender: string
    character_class: string
    currentHP: number
    maxHP: number
    xp: number
    level: number
    graphicUrl: string
    gold: number
    head_gear1?: number | null
    left_hand_gear2?: number | null
    right_hand_gear3?: number | null
    foot_gear4?: number | null
    chest_gear5?: number | null
    backpack1?: number
    backpack2?: number
    backpack3?: number
    backpack4?: number
    backpack5?: number
    backpack6?: number
    backpack7?: number
    backpack8?: number
    base_attack: number
    base_armor: number
    base_speed: number
    magic_points?: number | null
    current_mp?: number | null
    isNPC?: boolean
    location_coordinates?: string | null
    stagescompleted?: number
    inventory?: Character_GearUncheckedCreateNestedManyWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutUserInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutUserInput, CharacterUncheckedCreateWithoutUserInput>
  }

  export type CharacterUpsertWithoutUserInput = {
    update: XOR<CharacterUpdateWithoutUserInput, CharacterUncheckedUpdateWithoutUserInput>
    create: XOR<CharacterCreateWithoutUserInput, CharacterUncheckedCreateWithoutUserInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutUserInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutUserInput, CharacterUncheckedUpdateWithoutUserInput>
  }

  export type CharacterUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    character_class?: StringFieldUpdateOperationsInput | string
    currentHP?: IntFieldUpdateOperationsInput | number
    maxHP?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
    gold?: IntFieldUpdateOperationsInput | number
    head_gear1?: NullableIntFieldUpdateOperationsInput | number | null
    left_hand_gear2?: NullableIntFieldUpdateOperationsInput | number | null
    right_hand_gear3?: NullableIntFieldUpdateOperationsInput | number | null
    foot_gear4?: NullableIntFieldUpdateOperationsInput | number | null
    chest_gear5?: NullableIntFieldUpdateOperationsInput | number | null
    backpack1?: IntFieldUpdateOperationsInput | number
    backpack2?: IntFieldUpdateOperationsInput | number
    backpack3?: IntFieldUpdateOperationsInput | number
    backpack4?: IntFieldUpdateOperationsInput | number
    backpack5?: IntFieldUpdateOperationsInput | number
    backpack6?: IntFieldUpdateOperationsInput | number
    backpack7?: IntFieldUpdateOperationsInput | number
    backpack8?: IntFieldUpdateOperationsInput | number
    base_attack?: IntFieldUpdateOperationsInput | number
    base_armor?: IntFieldUpdateOperationsInput | number
    base_speed?: IntFieldUpdateOperationsInput | number
    magic_points?: NullableIntFieldUpdateOperationsInput | number | null
    current_mp?: NullableIntFieldUpdateOperationsInput | number | null
    isNPC?: BoolFieldUpdateOperationsInput | boolean
    location_coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    stagescompleted?: IntFieldUpdateOperationsInput | number
    inventory?: Character_GearUpdateManyWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    character_class?: StringFieldUpdateOperationsInput | string
    currentHP?: IntFieldUpdateOperationsInput | number
    maxHP?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
    gold?: IntFieldUpdateOperationsInput | number
    head_gear1?: NullableIntFieldUpdateOperationsInput | number | null
    left_hand_gear2?: NullableIntFieldUpdateOperationsInput | number | null
    right_hand_gear3?: NullableIntFieldUpdateOperationsInput | number | null
    foot_gear4?: NullableIntFieldUpdateOperationsInput | number | null
    chest_gear5?: NullableIntFieldUpdateOperationsInput | number | null
    backpack1?: IntFieldUpdateOperationsInput | number
    backpack2?: IntFieldUpdateOperationsInput | number
    backpack3?: IntFieldUpdateOperationsInput | number
    backpack4?: IntFieldUpdateOperationsInput | number
    backpack5?: IntFieldUpdateOperationsInput | number
    backpack6?: IntFieldUpdateOperationsInput | number
    backpack7?: IntFieldUpdateOperationsInput | number
    backpack8?: IntFieldUpdateOperationsInput | number
    base_attack?: IntFieldUpdateOperationsInput | number
    base_armor?: IntFieldUpdateOperationsInput | number
    base_speed?: IntFieldUpdateOperationsInput | number
    magic_points?: NullableIntFieldUpdateOperationsInput | number | null
    current_mp?: NullableIntFieldUpdateOperationsInput | number | null
    isNPC?: BoolFieldUpdateOperationsInput | boolean
    location_coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    stagescompleted?: IntFieldUpdateOperationsInput | number
    inventory?: Character_GearUncheckedUpdateManyWithoutCharacterNestedInput
  }

  export type UserCreateWithoutCharacterInput = {
    username: string
    password: string
    isAdmin?: boolean
    isBanned?: boolean
    createdAt?: Date | string
    phone?: number | null
    email?: string | null
  }

  export type UserUncheckedCreateWithoutCharacterInput = {
    id?: number
    username: string
    password: string
    isAdmin?: boolean
    isBanned?: boolean
    createdAt?: Date | string
    phone?: number | null
    email?: string | null
  }

  export type UserCreateOrConnectWithoutCharacterInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCharacterInput, UserUncheckedCreateWithoutCharacterInput>
  }

  export type Character_GearCreateWithoutCharacterInput = {
    gear: GearCreateNestedOneWithoutCharacter_GearInput
  }

  export type Character_GearUncheckedCreateWithoutCharacterInput = {
    id?: number
    gear_id: number
  }

  export type Character_GearCreateOrConnectWithoutCharacterInput = {
    where: Character_GearWhereUniqueInput
    create: XOR<Character_GearCreateWithoutCharacterInput, Character_GearUncheckedCreateWithoutCharacterInput>
  }

  export type Character_GearCreateManyCharacterInputEnvelope = {
    data: Character_GearCreateManyCharacterInput | Character_GearCreateManyCharacterInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCharacterInput = {
    update: XOR<UserUpdateWithoutCharacterInput, UserUncheckedUpdateWithoutCharacterInput>
    create: XOR<UserCreateWithoutCharacterInput, UserUncheckedCreateWithoutCharacterInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCharacterInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCharacterInput, UserUncheckedUpdateWithoutCharacterInput>
  }

  export type UserUpdateWithoutCharacterInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutCharacterInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Character_GearUpsertWithWhereUniqueWithoutCharacterInput = {
    where: Character_GearWhereUniqueInput
    update: XOR<Character_GearUpdateWithoutCharacterInput, Character_GearUncheckedUpdateWithoutCharacterInput>
    create: XOR<Character_GearCreateWithoutCharacterInput, Character_GearUncheckedCreateWithoutCharacterInput>
  }

  export type Character_GearUpdateWithWhereUniqueWithoutCharacterInput = {
    where: Character_GearWhereUniqueInput
    data: XOR<Character_GearUpdateWithoutCharacterInput, Character_GearUncheckedUpdateWithoutCharacterInput>
  }

  export type Character_GearUpdateManyWithWhereWithoutCharacterInput = {
    where: Character_GearScalarWhereInput
    data: XOR<Character_GearUpdateManyMutationInput, Character_GearUncheckedUpdateManyWithoutCharacterInput>
  }

  export type Character_GearScalarWhereInput = {
    AND?: Character_GearScalarWhereInput | Character_GearScalarWhereInput[]
    OR?: Character_GearScalarWhereInput[]
    NOT?: Character_GearScalarWhereInput | Character_GearScalarWhereInput[]
    id?: IntFilter<"Character_Gear"> | number
    character_id?: IntFilter<"Character_Gear"> | number
    gear_id?: IntFilter<"Character_Gear"> | number
  }

  export type CharacterCreateWithoutInventoryInput = {
    name: string
    gender: string
    character_class: string
    currentHP: number
    maxHP: number
    xp: number
    level: number
    graphicUrl: string
    gold: number
    head_gear1?: number | null
    left_hand_gear2?: number | null
    right_hand_gear3?: number | null
    foot_gear4?: number | null
    chest_gear5?: number | null
    backpack1?: number
    backpack2?: number
    backpack3?: number
    backpack4?: number
    backpack5?: number
    backpack6?: number
    backpack7?: number
    backpack8?: number
    base_attack: number
    base_armor: number
    base_speed: number
    magic_points?: number | null
    current_mp?: number | null
    isNPC?: boolean
    location_coordinates?: string | null
    stagescompleted?: number
    user?: UserCreateNestedOneWithoutCharacterInput
  }

  export type CharacterUncheckedCreateWithoutInventoryInput = {
    id?: number
    name: string
    gender: string
    character_class: string
    currentHP: number
    maxHP: number
    xp: number
    level: number
    graphicUrl: string
    gold: number
    head_gear1?: number | null
    left_hand_gear2?: number | null
    right_hand_gear3?: number | null
    foot_gear4?: number | null
    chest_gear5?: number | null
    backpack1?: number
    backpack2?: number
    backpack3?: number
    backpack4?: number
    backpack5?: number
    backpack6?: number
    backpack7?: number
    backpack8?: number
    base_attack: number
    base_armor: number
    base_speed: number
    magic_points?: number | null
    current_mp?: number | null
    isNPC?: boolean
    location_coordinates?: string | null
    stagescompleted?: number
    user?: UserUncheckedCreateNestedOneWithoutCharacterInput
  }

  export type CharacterCreateOrConnectWithoutInventoryInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutInventoryInput, CharacterUncheckedCreateWithoutInventoryInput>
  }

  export type GearCreateWithoutCharacter_GearInput = {
    name: string
    description: string
    attack: number
    armor: number
    isTwoHanded: boolean
    equip_location: number
    preferred_class: string
    health_bonus: number
    armor_bonus: number
    attack_bonus: number
    speed_bonus: number
    graphicUrl: string
    price: number
  }

  export type GearUncheckedCreateWithoutCharacter_GearInput = {
    id?: number
    name: string
    description: string
    attack: number
    armor: number
    isTwoHanded: boolean
    equip_location: number
    preferred_class: string
    health_bonus: number
    armor_bonus: number
    attack_bonus: number
    speed_bonus: number
    graphicUrl: string
    price: number
  }

  export type GearCreateOrConnectWithoutCharacter_GearInput = {
    where: GearWhereUniqueInput
    create: XOR<GearCreateWithoutCharacter_GearInput, GearUncheckedCreateWithoutCharacter_GearInput>
  }

  export type CharacterUpsertWithoutInventoryInput = {
    update: XOR<CharacterUpdateWithoutInventoryInput, CharacterUncheckedUpdateWithoutInventoryInput>
    create: XOR<CharacterCreateWithoutInventoryInput, CharacterUncheckedCreateWithoutInventoryInput>
    where?: CharacterWhereInput
  }

  export type CharacterUpdateToOneWithWhereWithoutInventoryInput = {
    where?: CharacterWhereInput
    data: XOR<CharacterUpdateWithoutInventoryInput, CharacterUncheckedUpdateWithoutInventoryInput>
  }

  export type CharacterUpdateWithoutInventoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    character_class?: StringFieldUpdateOperationsInput | string
    currentHP?: IntFieldUpdateOperationsInput | number
    maxHP?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
    gold?: IntFieldUpdateOperationsInput | number
    head_gear1?: NullableIntFieldUpdateOperationsInput | number | null
    left_hand_gear2?: NullableIntFieldUpdateOperationsInput | number | null
    right_hand_gear3?: NullableIntFieldUpdateOperationsInput | number | null
    foot_gear4?: NullableIntFieldUpdateOperationsInput | number | null
    chest_gear5?: NullableIntFieldUpdateOperationsInput | number | null
    backpack1?: IntFieldUpdateOperationsInput | number
    backpack2?: IntFieldUpdateOperationsInput | number
    backpack3?: IntFieldUpdateOperationsInput | number
    backpack4?: IntFieldUpdateOperationsInput | number
    backpack5?: IntFieldUpdateOperationsInput | number
    backpack6?: IntFieldUpdateOperationsInput | number
    backpack7?: IntFieldUpdateOperationsInput | number
    backpack8?: IntFieldUpdateOperationsInput | number
    base_attack?: IntFieldUpdateOperationsInput | number
    base_armor?: IntFieldUpdateOperationsInput | number
    base_speed?: IntFieldUpdateOperationsInput | number
    magic_points?: NullableIntFieldUpdateOperationsInput | number | null
    current_mp?: NullableIntFieldUpdateOperationsInput | number | null
    isNPC?: BoolFieldUpdateOperationsInput | boolean
    location_coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    stagescompleted?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutCharacterNestedInput
  }

  export type CharacterUncheckedUpdateWithoutInventoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    character_class?: StringFieldUpdateOperationsInput | string
    currentHP?: IntFieldUpdateOperationsInput | number
    maxHP?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
    gold?: IntFieldUpdateOperationsInput | number
    head_gear1?: NullableIntFieldUpdateOperationsInput | number | null
    left_hand_gear2?: NullableIntFieldUpdateOperationsInput | number | null
    right_hand_gear3?: NullableIntFieldUpdateOperationsInput | number | null
    foot_gear4?: NullableIntFieldUpdateOperationsInput | number | null
    chest_gear5?: NullableIntFieldUpdateOperationsInput | number | null
    backpack1?: IntFieldUpdateOperationsInput | number
    backpack2?: IntFieldUpdateOperationsInput | number
    backpack3?: IntFieldUpdateOperationsInput | number
    backpack4?: IntFieldUpdateOperationsInput | number
    backpack5?: IntFieldUpdateOperationsInput | number
    backpack6?: IntFieldUpdateOperationsInput | number
    backpack7?: IntFieldUpdateOperationsInput | number
    backpack8?: IntFieldUpdateOperationsInput | number
    base_attack?: IntFieldUpdateOperationsInput | number
    base_armor?: IntFieldUpdateOperationsInput | number
    base_speed?: IntFieldUpdateOperationsInput | number
    magic_points?: NullableIntFieldUpdateOperationsInput | number | null
    current_mp?: NullableIntFieldUpdateOperationsInput | number | null
    isNPC?: BoolFieldUpdateOperationsInput | boolean
    location_coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    stagescompleted?: IntFieldUpdateOperationsInput | number
    user?: UserUncheckedUpdateOneWithoutCharacterNestedInput
  }

  export type GearUpsertWithoutCharacter_GearInput = {
    update: XOR<GearUpdateWithoutCharacter_GearInput, GearUncheckedUpdateWithoutCharacter_GearInput>
    create: XOR<GearCreateWithoutCharacter_GearInput, GearUncheckedCreateWithoutCharacter_GearInput>
    where?: GearWhereInput
  }

  export type GearUpdateToOneWithWhereWithoutCharacter_GearInput = {
    where?: GearWhereInput
    data: XOR<GearUpdateWithoutCharacter_GearInput, GearUncheckedUpdateWithoutCharacter_GearInput>
  }

  export type GearUpdateWithoutCharacter_GearInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    attack?: IntFieldUpdateOperationsInput | number
    armor?: IntFieldUpdateOperationsInput | number
    isTwoHanded?: BoolFieldUpdateOperationsInput | boolean
    equip_location?: IntFieldUpdateOperationsInput | number
    preferred_class?: StringFieldUpdateOperationsInput | string
    health_bonus?: IntFieldUpdateOperationsInput | number
    armor_bonus?: IntFieldUpdateOperationsInput | number
    attack_bonus?: IntFieldUpdateOperationsInput | number
    speed_bonus?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type GearUncheckedUpdateWithoutCharacter_GearInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    attack?: IntFieldUpdateOperationsInput | number
    armor?: IntFieldUpdateOperationsInput | number
    isTwoHanded?: BoolFieldUpdateOperationsInput | boolean
    equip_location?: IntFieldUpdateOperationsInput | number
    preferred_class?: StringFieldUpdateOperationsInput | string
    health_bonus?: IntFieldUpdateOperationsInput | number
    armor_bonus?: IntFieldUpdateOperationsInput | number
    attack_bonus?: IntFieldUpdateOperationsInput | number
    speed_bonus?: IntFieldUpdateOperationsInput | number
    graphicUrl?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type Character_GearCreateWithoutGearInput = {
    Character: CharacterCreateNestedOneWithoutInventoryInput
  }

  export type Character_GearUncheckedCreateWithoutGearInput = {
    id?: number
    character_id: number
  }

  export type Character_GearCreateOrConnectWithoutGearInput = {
    where: Character_GearWhereUniqueInput
    create: XOR<Character_GearCreateWithoutGearInput, Character_GearUncheckedCreateWithoutGearInput>
  }

  export type Character_GearCreateManyGearInputEnvelope = {
    data: Character_GearCreateManyGearInput | Character_GearCreateManyGearInput[]
    skipDuplicates?: boolean
  }

  export type Character_GearUpsertWithWhereUniqueWithoutGearInput = {
    where: Character_GearWhereUniqueInput
    update: XOR<Character_GearUpdateWithoutGearInput, Character_GearUncheckedUpdateWithoutGearInput>
    create: XOR<Character_GearCreateWithoutGearInput, Character_GearUncheckedCreateWithoutGearInput>
  }

  export type Character_GearUpdateWithWhereUniqueWithoutGearInput = {
    where: Character_GearWhereUniqueInput
    data: XOR<Character_GearUpdateWithoutGearInput, Character_GearUncheckedUpdateWithoutGearInput>
  }

  export type Character_GearUpdateManyWithWhereWithoutGearInput = {
    where: Character_GearScalarWhereInput
    data: XOR<Character_GearUpdateManyMutationInput, Character_GearUncheckedUpdateManyWithoutGearInput>
  }

  export type Character_GearCreateManyCharacterInput = {
    id?: number
    gear_id: number
  }

  export type Character_GearUpdateWithoutCharacterInput = {
    gear?: GearUpdateOneRequiredWithoutCharacter_GearNestedInput
  }

  export type Character_GearUncheckedUpdateWithoutCharacterInput = {
    id?: IntFieldUpdateOperationsInput | number
    gear_id?: IntFieldUpdateOperationsInput | number
  }

  export type Character_GearUncheckedUpdateManyWithoutCharacterInput = {
    id?: IntFieldUpdateOperationsInput | number
    gear_id?: IntFieldUpdateOperationsInput | number
  }

  export type Character_GearCreateManyGearInput = {
    id?: number
    character_id: number
  }

  export type Character_GearUpdateWithoutGearInput = {
    Character?: CharacterUpdateOneRequiredWithoutInventoryNestedInput
  }

  export type Character_GearUncheckedUpdateWithoutGearInput = {
    id?: IntFieldUpdateOperationsInput | number
    character_id?: IntFieldUpdateOperationsInput | number
  }

  export type Character_GearUncheckedUpdateManyWithoutGearInput = {
    id?: IntFieldUpdateOperationsInput | number
    character_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CharacterCountOutputTypeDefaultArgs instead
     */
    export type CharacterCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CharacterCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GearCountOutputTypeDefaultArgs instead
     */
    export type GearCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GearCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CharacterDefaultArgs instead
     */
    export type CharacterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CharacterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Character_GearDefaultArgs instead
     */
    export type Character_GearArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Character_GearDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GearDefaultArgs instead
     */
    export type GearArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GearDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Character_ClassDefaultArgs instead
     */
    export type Character_ClassArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Character_ClassDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MonsterDefaultArgs instead
     */
    export type MonsterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MonsterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SpellsDefaultArgs instead
     */
    export type SpellsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SpellsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}