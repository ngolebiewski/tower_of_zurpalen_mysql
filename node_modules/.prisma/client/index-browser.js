
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.8.0
 * Query Engine version: 0a83d8541752d7582de2ebc1ece46519ce72a848
 */
Prisma.prismaVersion = {
  client: "5.8.0",
  engine: "0a83d8541752d7582de2ebc1ece46519ce72a848"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  isAdmin: 'isAdmin',
  isBanned: 'isBanned',
  createdAt: 'createdAt',
  character_id: 'character_id',
  phone: 'phone',
  email: 'email'
};

exports.Prisma.CharacterScalarFieldEnum = {
  id: 'id',
  name: 'name',
  gender: 'gender',
  character_class: 'character_class',
  currentHP: 'currentHP',
  maxHP: 'maxHP',
  xp: 'xp',
  level: 'level',
  graphicUrl: 'graphicUrl',
  gold: 'gold',
  head_gear1: 'head_gear1',
  left_hand_gear2: 'left_hand_gear2',
  right_hand_gear3: 'right_hand_gear3',
  foot_gear4: 'foot_gear4',
  chest_gear5: 'chest_gear5',
  backpack1: 'backpack1',
  backpack2: 'backpack2',
  backpack3: 'backpack3',
  backpack4: 'backpack4',
  backpack5: 'backpack5',
  backpack6: 'backpack6',
  backpack7: 'backpack7',
  backpack8: 'backpack8',
  base_attack: 'base_attack',
  base_armor: 'base_armor',
  base_speed: 'base_speed',
  magic_points: 'magic_points',
  current_mp: 'current_mp',
  isNPC: 'isNPC',
  location_coordinates: 'location_coordinates',
  stagescompleted: 'stagescompleted'
};

exports.Prisma.Character_GearScalarFieldEnum = {
  id: 'id',
  character_id: 'character_id',
  gear_id: 'gear_id'
};

exports.Prisma.GearScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  attack: 'attack',
  armor: 'armor',
  isTwoHanded: 'isTwoHanded',
  equip_location: 'equip_location',
  preferred_class: 'preferred_class',
  health_bonus: 'health_bonus',
  armor_bonus: 'armor_bonus',
  attack_bonus: 'attack_bonus',
  speed_bonus: 'speed_bonus',
  graphicUrl: 'graphicUrl',
  price: 'price'
};

exports.Prisma.Character_ClassScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  beginning_attack: 'beginning_attack',
  beginning_armor: 'beginning_armor',
  beginning_speed: 'beginning_speed',
  beginning_hp: 'beginning_hp',
  graphicUrl: 'graphicUrl'
};

exports.Prisma.MonsterScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  base_attack: 'base_attack',
  base_armor: 'base_armor',
  base_speed: 'base_speed',
  level: 'level',
  attack_name: 'attack_name',
  graphicUrl: 'graphicUrl',
  xp_base_value: 'xp_base_value',
  maxHP: 'maxHP',
  currentHP: 'currentHP',
  isBoss: 'isBoss',
  loot_value: 'loot_value'
};

exports.Prisma.SpellsScalarFieldEnum = {
  id: 'id',
  spell_name: 'spell_name',
  description: 'description',
  health_bonus: 'health_bonus',
  armor_bonus: 'armor_bonus',
  attack_bonus: 'attack_bonus',
  speed_bonus: 'speed_bonus',
  graphicUrl: 'graphicUrl',
  level: 'level'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Character: 'Character',
  Character_Gear: 'Character_Gear',
  Gear: 'Gear',
  Character_Class: 'Character_Class',
  Monster: 'Monster',
  Spells: 'Spells'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
